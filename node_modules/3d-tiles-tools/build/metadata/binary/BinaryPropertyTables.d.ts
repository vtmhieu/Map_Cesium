import { BinaryPropertyTable } from "./BinaryPropertyTable";
import { Schema } from "../../structure/Metadata/Schema";
import { ClassProperty } from "../../structure/Metadata/ClassProperty";
import { MetadataEnum } from "../../structure/Metadata/MetadataEnum";
/**
 * Methods to create `BinaryPropertyTable` instances from individual
 * properties and their associated data.
 *
 * Right now, the methods in this class are mainly intended for
 * generating test data. They can be used to create property
 * tables based on single properties and their associated values.
 *
 * When a method expects such `values` to be passed in, then the
 * structure is assumed to be a "JSON-representation" of the data
 * that corresponds to one column of the table:
 *
 * - scalar properties are given as an array of values
 * - properties of structured types (VECn or MATn) are given
 *   as an array of arrays
 * - array properties are given as an array of the aforementioned
 *   inputs.
 *
 * For example:
 * - a string property will be ["row0", "row1"]
 * - a string array property will be
 *   [ ["row0-col0", "row0-col1"],
 *     ["row1-col0", "row1-col1"] ]
 * - a VEC2 property will be [ [0,0], [1,1] ]
 * - a VEC2 array property will be
 *   [ [ [0,0], [0,1], [0,2] ],
 *     [ [1,0], [1,1], [1,2] ] ]
 *
 *
 * TODO Some methods in this class are creating plain JSON
 * structures programmatically (e.g. a Schema that contains
 * a single class with a single property). Some of these
 * methods may be omitted in the future, if these structures
 * have to be created manually for unit tests anyhow.
 *
 * @internal
 */
export declare class BinaryPropertyTables {
    /**
     * Creates a (dummy) `MetadataClass` that only contains the given property
     *
     * @param propertyName - The property name
     * @param classProperty - The `ClassProperty`
     * @returns The `MetadataClass`
     */
    private static createMetadataClassFromClassProperty;
    /**
     * Creates a (dummy) `Schema` that only contains the given class
     *
     * @param className - The class name
     * @param metadataClass - The `MetadataClass`
     * @returns The metadata `Schema`
     */
    private static createSchemaFromMetadataClass;
    /**
     * Creates a `PropertyTable` from the given input.
     *
     * This creates a dummy `PropertyTable` with a single property,
     * which is used for the other methods in this class that can
     * create `BinaryPropertyTable` or `PropertyTableModel` objects
     * from single properties.
     *
     * @param className - The class name
     * @param propertyName - The property name
     * @param count - The count (number of rows) of the table
     * @param propertyTableProperty - The `PropertyTableProperty`
     * @returns The `PropertyTable`
     */
    private static createPropertyTableFromProperty;
    /**
     * Creates a `PropertyTableProperty` from the given inputs.
     *
     * This receives the `ClassProperty` itself and the associated values,
     * and generates the `PropertyTableProperty` and its associated
     * binary data. The binary data will include the buffer views for the
     * `values`, `arrayOffsets`, and `stringOffsets`, which will be
     * added to the given `bufferViewsData` array.
     *
     * @param classProperty - The `ClassProperty`
     * @param schema - The metadata `Schema`. This is only used internally
     * for looking up information about (binary) enum values, if the
     * given property is an ENUM property.
     * @param values - The values for the property
     * @param arrayOffsetType - The `arrayOffsetType` for the property
     * (only used when the property is a variable-length array,
     * defaulting to `UINT32`)
     * @param stringOffsetType - The `stringOffsetType` for the property
     * (only used when the property is a STRING property,
     * defaulting to `UINT32`))
     * @param bufferViewsData - The array that will receive the buffer
     * view buffers
     * @returns The `PropertyTableProperty`
     */
    private static createPropertyTableProperty;
    /**
     * Creates a `Schema` from the given input.
     *
     * This function is mainly intended for generating test data.
     * It generates a "dummy" schema that only contains a class
     * with the given property, and the given enum.
     *
     * @param propertyName - The property name
     * @param classProperty - The `ClassProperty`
     * @param metadataEnum - The optional `MetadataEnum` when the
     * property is an enum property
     * @returns The schema
     */
    static createSchemaFromClassProperty(propertyName: string, classProperty: ClassProperty, metadataEnum: MetadataEnum | undefined): Schema;
    /**
     * Creates a `BinaryPropertyTable` from the given input.
     *
     * This function is mainly intended for generating test data:
     * It receives a predefined `ClassProperty` and associated
     * values, and generates a ("dummy") class, schema, and
     * property table for exactly this single property, together
     * with the associated binary data.
     *
     * @param propertyName - The property name
     * @param classProperty - The `ClassProperty`
     * @param values - The property values
     * @param arrayOffsetType - The `arrayOffsetType`, only used
     * for variable-length array properties, defaulting to `UINT32`
     * @param stringOffsetType - The `stringOffsetType`, only used
     * for STRING properties, defaulting to `UINT32`
     * @param metadataEnum - The optional `MetadataEnum` that defines
     * the (numeric) values that are written into the binary data,
     * based on the (string) values from the `values` parameter
     * @returns The `BinaryPropertyTable`
     */
    static createBinaryPropertyTableFromProperty(propertyName: string, classProperty: ClassProperty, values: any, arrayOffsetType: string | undefined, stringOffsetType: string | undefined, metadataEnum: MetadataEnum | undefined): BinaryPropertyTable;
    /**
     * Creates a `BinaryPropertyTable` from the given input.
     *
     * This function is mainly intended for generating test data.
     * It receives information about the property (via the `className`
     * and the `propertyName`, referring to the given schema), and the
     * values for the property, and generates a property table for
     * exactly this single property, together with the associated
     * binary data.
     *
     * @param schema - The `Schema`
     * @param className - The class name
     * @param propertyName - The property name
     * @param values - The property values
     * @param arrayOffsetType - The `arrayOffsetType`, only used
     * for variable-length array properties, defaulting to `UINT32`
     * @param stringOffsetType - The `stringOffsetType`, only used
     * for STRING properties, defaulting to `UINT32`
     * @returns The `BinaryPropertyTable`
     * @throws MetadataError If the input is not structurally valid
     */
    static createBinaryPropertyTable(schema: Schema, className: string, propertyName: string, values: any, arrayOffsetType: string | undefined, stringOffsetType: string | undefined): BinaryPropertyTable;
    private static toBuffer;
    private static createBuffer;
    private static createBufferInternal;
    private static createStringBuffer;
    private static createStringBufferInternal;
    private static createBooleanBuffer;
    private static createBooleanBufferInternal;
    private static flatten;
    private static flattenFully;
    private static createValuesBuffer;
    private static createStringOffsetBuffer;
    private static createArrayOffsetBuffer;
}
//# sourceMappingURL=BinaryPropertyTables.d.ts.map