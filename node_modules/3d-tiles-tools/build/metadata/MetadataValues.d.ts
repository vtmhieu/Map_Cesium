import { ClassProperty } from "../structure/Metadata/ClassProperty";
/**
 * Internal methods related to metadata values.
 *
 * @internal
 */
export declare class MetadataValues {
    /**
     * Processes the given "raw" value that was obtained for a metadata
     * property (e.g. from the JSON representation), and returns the
     * processed value according to the type definition that is given
     * by the given class property.
     *
     * If the type defines a `noData` value, and the given value
     * is the `noData` value, then the `default` value of the type
     * is returned.
     *
     * If the type defines the value to be `normalized`, then the
     * normalization is applied to the given values.
     *
     * If the type defines an `offset`, then the offset is added
     * to the value.
     *
     * If the type defines a `scale`, then this is multiplied
     * with the value.
     *
     * @param classProperty - The `ClassProperty`
     * @param offsetOverride -: An optional override for the
     * `offset` of the `ClassProperty`. If this is defined, then
     * it will be used instead of the one from the class property.
     * @param scaleOverride -: An optional override for the
     * `scale` of the `ClassProperty`. If this is defined, then
     * it will be used instead of the one from the class property.
     * @param value - The value
     * @returns The processed value
     */
    static processValue(classProperty: ClassProperty, offsetOverride: any, scaleOverride: any, value: any): any;
    /**
     * Normalize the given input value, based on the given component type.
     *
     * If example, the value of `255` for `UINT8` will be normalized to `1.0`.
     *
     * @param value - The input value
     * @param componentType - The component type
     * @returns The normalized value
     */
    private static normalize;
}
//# sourceMappingURL=MetadataValues.d.ts.map