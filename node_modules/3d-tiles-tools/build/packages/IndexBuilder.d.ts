/// <reference types="node" />
/**
 * A class that can build an index for a 3TZ file that will be stored
 * as the `"@3dtilesIndex1@"` file.
 *
 * @internal
 */
export declare class IndexBuilder {
    /**
     * The fixed part of the size of a ZIP local file header.
     */
    private static readonly ZIP_LOCAL_FILE_HEADER_SIZE;
    /**
     * The entries that have been added.
     */
    private readonly entries;
    /**
     * The current Local File Offset. This is the accumulated offset
     * for all entries that have been added, plus the size for
     * the ZIP Local File Headers for these entries
     */
    private currentEntryOffset;
    /**
     * Creates a new instance
     */
    constructor();
    /**
     * Add the given entry to the index.
     *
     * This assumes that the given path is already normalized, as described
     * in the 3TZ specification: It is the relative path of the file, with
     * slashes `/`, and no leading slash.
     *
     * @param key - The key (path) for the entry
     * @param size - The size of the content for this entry
     */
    addEntry(key: string, size: number): void;
    /**
     * Compares two buffers that contain MD5 hashes.
     *
     * Returns a number that is
     * - 0 when b0==b1
     * - negative when b0 is less than b1
     * - positive when b0 greater than b1
     *
     * @param b0 - The first buffer
     * @param b1 - The second buffer
     * @returns The comparison result
     */
    private static compareMd5HashBuffers;
    /**
     * Create the buffer that contains the actual data that can be written
     * into the `"@3dtilesIndex1@"` file.
     *
     * @returns The buffer containing the index data
     */
    createBuffer(): Buffer;
}
//# sourceMappingURL=IndexBuilder.d.ts.map