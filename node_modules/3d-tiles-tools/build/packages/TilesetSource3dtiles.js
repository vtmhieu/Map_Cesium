"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TilesetSource3dtiles = void 0;
const better_sqlite3_1 = __importDefault(require("better-sqlite3"));
const Iterables_1 = require("../base/Iterables");
const TilesetError_1 = require("../tilesetData/TilesetError");
const TableStructureValidator_1 = require("./TableStructureValidator");
/**
 * Implementation of a TilesetSource based on a 3DTILES (SQLITE3 database)
 * file.
 *
 * @internal
 */
class TilesetSource3dtiles {
    /**
     * Default constructor
     */
    constructor() {
        this.db = undefined;
    }
    /** {@inheritDoc TilesetSource.open} */
    open(fullInputName) {
        if (this.db) {
            throw new TilesetError_1.TilesetError("Database already opened");
        }
        this.db = new better_sqlite3_1.default(fullInputName);
        const tableStructure = {
            name: "media",
            columns: [
                {
                    name: "key",
                    type: "TEXT",
                },
                {
                    name: "content",
                    type: "BLOB",
                },
            ],
        };
        const message = TableStructureValidator_1.TableStructureValidator.validate(this.db, tableStructure);
        if (message) {
            this.close();
            throw new TilesetError_1.TilesetError(message);
        }
    }
    /** {@inheritDoc TilesetSource.getKeys} */
    getKeys() {
        if (!this.db) {
            throw new TilesetError_1.TilesetError("Source is not opened. Call 'open' first.");
        }
        const selection = this.db.prepare("SELECT * FROM media");
        const iterator = selection.iterate();
        return Iterables_1.Iterables.map(iterator, (row) => row.key);
    }
    /** {@inheritDoc TilesetSource.getValue} */
    getValue(key) {
        if (!this.db) {
            throw new Error("Source is not opened. Call 'open' first.");
        }
        const selection = this.db.prepare("SELECT * FROM media WHERE key = ?");
        const row = selection.get(key);
        if (row) {
            return row.content;
        }
        return undefined;
    }
    /** {@inheritDoc TilesetSource.close} */
    close() {
        if (!this.db) {
            throw new Error("Source is not opened. Call 'open' first.");
        }
        this.db.close();
        this.db = undefined;
    }
}
exports.TilesetSource3dtiles = TilesetSource3dtiles;
