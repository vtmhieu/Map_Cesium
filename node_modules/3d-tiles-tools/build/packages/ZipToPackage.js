"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZipToPackage = void 0;
const node_stream_zip_1 = __importDefault(require("node-stream-zip"));
const TilesetTargets_1 = require("../tilesetData/TilesetTargets");
/**
 * Methods for converting ZIP files into 3D Tiles packages.
 */
class ZipToPackage {
    /**
     * Writes the data from the given input file (which is assumed to be a plain
     * ZIP file) into a tileset target.
     *
     * The type of the output depends on the extension of the output file name:
     * If it is `.3tz`, then the output will be a 3TZ archive
     * If it is `.3dtiles`, then the output will be a 3DTILES package
     * If it is empty, then the output will be a directory
     *
     * @param inputFileName The full input file name
     * @param outputFileName The full output file name
     * @param overwrite Whether the output file should be overwritten
     * if it already exists
     */
    static async convert(inputFileName, outputFileName, overwrite) {
        const zip = new node_stream_zip_1.default.async({ file: inputFileName });
        const tilesetTarget = TilesetTargets_1.TilesetTargets.createAndBegin(outputFileName, overwrite);
        tilesetTarget.begin(outputFileName, overwrite);
        const entries = await zip.entries();
        for (const entry of Object.values(entries)) {
            const e = entry;
            if (!e.isDirectory) {
                const key = e.name;
                const content = await zip.entryData(e.name);
                if (content) {
                    tilesetTarget.addEntry(key, content);
                }
            }
        }
        await zip.close();
        await tilesetTarget.end();
    }
}
exports.ZipToPackage = ZipToPackage;
