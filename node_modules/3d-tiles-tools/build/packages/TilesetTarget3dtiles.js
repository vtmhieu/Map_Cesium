"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TilesetTarget3dtiles = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const better_sqlite3_1 = __importDefault(require("better-sqlite3"));
const TilesetError_1 = require("../tilesetData/TilesetError");
/**
 * Implementation of a TilesetTarget that creates a
 * 3DTILES (SQLITE3 database) file.
 *
 * @internal
 */
class TilesetTarget3dtiles {
    /**
     * Default constructor
     */
    constructor() {
        this.db = undefined;
    }
    /** {@inheritDoc TilesetTarget.begin} */
    begin(fullOutputName, overwrite) {
        if (fs_1.default.existsSync(fullOutputName)) {
            if (overwrite) {
                fs_1.default.unlinkSync(fullOutputName);
            }
            else {
                throw new TilesetError_1.TilesetError("File already exists: " + fullOutputName);
            }
        }
        else {
            const directory = path_1.default.dirname(fullOutputName);
            if (!fs_1.default.existsSync(directory)) {
                fs_1.default.mkdirSync(directory, { recursive: true });
            }
        }
        if (this.db) {
            throw new TilesetError_1.TilesetError("Target already opened");
        }
        this.db = new better_sqlite3_1.default(fullOutputName);
        this.db.prepare("PRAGMA journal_mode=off;").run();
        this.db.prepare("BEGIN").run();
        this.db
            .prepare("CREATE TABLE media (key TEXT PRIMARY KEY, content BLOB)")
            .run();
    }
    /** {@inheritDoc TilesetTarget.addEntry} */
    addEntry(key, content) {
        if (!this.db) {
            throw new TilesetError_1.TilesetError("Target is not opened. Call 'begin' first.");
        }
        const insertion = this.db.prepare("INSERT INTO media VALUES (?, ?)");
        insertion.run(key, content);
    }
    /** {@inheritDoc TilesetTarget.end} */
    async end() {
        if (!this.db) {
            throw new TilesetError_1.TilesetError("Target is not opened. Call 'begin' first.");
        }
        this.db.prepare("COMMIT").run();
        this.db.close();
        this.db = undefined;
    }
}
exports.TilesetTarget3dtiles = TilesetTarget3dtiles;
