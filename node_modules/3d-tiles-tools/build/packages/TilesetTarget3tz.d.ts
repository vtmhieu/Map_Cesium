/// <reference types="node" />
import { TilesetTarget } from "../tilesetData/TilesetTarget";
/**
 * Implementation of a TilesetTarget that creates a 3TZ file.
 *
 * @internal
 */
export declare class TilesetTarget3tz implements TilesetTarget {
    /**
     * The stream that the data is written to
     */
    private outputStream;
    /**
     * The promise that fulfills when the output stream is
     * closed, or is rejected when the output stream or
     * archive emitted an error.
     */
    private finishedPromise;
    /**
     * The archive object
     */
    private archive;
    /**
     * The index builder that will be used to generate
     * the `"@3dtilesIndex1@"` file for the 3TZ file.
     */
    private readonly indexBuilder;
    /**
     * Default constructor
     */
    constructor();
    /** {@inheritDoc TilesetTarget.begin} */
    begin(fullOutputName: string, overwrite: boolean): void;
    /**
     * Creates a promise that is fulfilled when the data has fully been
     * written to the target. Or maybe not. In any case, one has to wait
     * for the promise that is returned from "archiver.finalize()" AND for
     * this promise, to make sure that everything is written. For details,
     * see https://github.com/archiverjs/node-archiver/issues/476 ...
     *
     * @param archive - The archiver archive
     * @param outputStream - The output stream that the archive is writing to
     * @returns The promise that has to be waited for in "close"
     */
    private static createFinishedPromise;
    /** {@inheritDoc TilesetTarget.addEntry} */
    addEntry(key: string, content: Buffer): void;
    /** {@inheritDoc TilesetTarget.end} */
    end(): Promise<void>;
}
//# sourceMappingURL=TilesetTarget3tz.d.ts.map