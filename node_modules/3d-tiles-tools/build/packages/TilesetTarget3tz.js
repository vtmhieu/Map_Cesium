"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TilesetTarget3tz = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const archiver_1 = __importDefault(require("archiver"));
const TilesetError_1 = require("../tilesetData/TilesetError");
const IndexBuilder_1 = require("./IndexBuilder");
/**
 * Implementation of a TilesetTarget that creates a 3TZ file.
 *
 * @internal
 */
class TilesetTarget3tz {
    /**
     * Default constructor
     */
    constructor() {
        this.outputStream = undefined;
        this.archive = undefined;
        this.indexBuilder = new IndexBuilder_1.IndexBuilder();
    }
    /** {@inheritDoc TilesetTarget.begin} */
    begin(fullOutputName, overwrite) {
        if (fs_1.default.existsSync(fullOutputName)) {
            if (overwrite) {
                fs_1.default.unlinkSync(fullOutputName);
            }
            else {
                throw new TilesetError_1.TilesetError("File already exists: " + fullOutputName);
            }
        }
        else {
            const directory = path_1.default.dirname(fullOutputName);
            if (!fs_1.default.existsSync(directory)) {
                fs_1.default.mkdirSync(directory, { recursive: true });
            }
        }
        if (this.archive) {
            throw new TilesetError_1.TilesetError("Target already opened");
        }
        this.outputStream = fs_1.default.createWriteStream(fullOutputName);
        this.archive = (0, archiver_1.default)("zip", {
            store: true,
        });
        this.archive.pipe(this.outputStream);
        this.finishedPromise = TilesetTarget3tz.createFinishedPromise(this.archive, this.outputStream);
        // Logging and error handling for archiver:
        this.archive.on("warning", (error) => {
            throw new TilesetError_1.TilesetError(`${error}`);
        });
        this.archive.on("error", (error) => {
            throw new TilesetError_1.TilesetError(`${error}`);
        });
    }
    /**
     * Creates a promise that is fulfilled when the data has fully been
     * written to the target. Or maybe not. In any case, one has to wait
     * for the promise that is returned from "archiver.finalize()" AND for
     * this promise, to make sure that everything is written. For details,
     * see https://github.com/archiverjs/node-archiver/issues/476 ...
     *
     * @param archive - The archiver archive
     * @param outputStream - The output stream that the archive is writing to
     * @returns The promise that has to be waited for in "close"
     */
    static createFinishedPromise(archive, outputStream) {
        const finishedPromise = new Promise((resolve, reject) => {
            archive.on("error", reject);
            outputStream.on("error", reject);
            outputStream.on("close", resolve);
        });
        return finishedPromise;
    }
    /** {@inheritDoc TilesetTarget.addEntry} */
    addEntry(key, content) {
        if (!this.archive) {
            throw new TilesetError_1.TilesetError("Target is not opened. Call 'begin' first.");
        }
        this.archive.append(content, { name: key });
        this.indexBuilder.addEntry(key, content.length);
    }
    /** {@inheritDoc TilesetTarget.end} */
    async end() {
        if (!this.archive) {
            throw new TilesetError_1.TilesetError("Target is not opened. Call 'begin' first.");
        }
        // Create the index data, and add it as the LAST entry of the ZIP
        const indexData = this.indexBuilder.createBuffer();
        this.archive.append(indexData, { name: "@3dtilesIndex1@" });
        await this.archive.finalize();
        await this.finishedPromise;
        this.finishedPromise = undefined;
        this.outputStream = undefined;
        this.archive = undefined;
    }
}
exports.TilesetTarget3tz = TilesetTarget3tz;
