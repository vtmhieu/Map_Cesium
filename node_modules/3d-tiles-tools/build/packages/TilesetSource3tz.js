"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TilesetSource3tz = void 0;
const fs_1 = __importDefault(require("fs"));
const defined_1 = require("../base/defined");
const TilesetError_1 = require("../tilesetData/TilesetError");
const ArchiveFunctions3tz_1 = require("./ArchiveFunctions3tz");
/**
 * Implementation of a TilesetSource based on a 3TZ file.
 *
 * @internal
 */
class TilesetSource3tz {
    /**
     * Default constructor
     */
    constructor() {
        this.fd = undefined;
        this.zipIndex = undefined;
    }
    getZipIndex() {
        return this.zipIndex;
    }
    /** {@inheritDoc TilesetSource.open} */
    open(fullInputName) {
        if ((0, defined_1.defined)(this.fd)) {
            throw new TilesetError_1.TilesetError("Source already opened");
        }
        this.fd = fs_1.default.openSync(fullInputName, "r");
        this.zipIndex = ArchiveFunctions3tz_1.ArchiveFunctions3tz.readZipIndex(this.fd);
    }
    /** {@inheritDoc TilesetSource.getKeys} */
    getKeys() {
        if (!(0, defined_1.defined)(this.fd) || !this.zipIndex) {
            throw new TilesetError_1.TilesetError("Source is not opened. Call 'open' first.");
        }
        return TilesetSource3tz.createKeysIterator(this.fd, this.zipIndex);
    }
    static createKeysIterator(fd, zipIndex) {
        let index = 0;
        const iterator = {
            [Symbol.iterator]() {
                return this;
            },
            next() {
                if (index >= zipIndex.length) {
                    return { value: undefined, done: true };
                }
                const entry = zipIndex[index];
                const offset = entry.offset;
                const fileName = ArchiveFunctions3tz_1.ArchiveFunctions3tz.readFileName(fd, offset);
                const result = {
                    value: fileName,
                    done: false,
                };
                index++;
                return result;
            },
        };
        return iterator;
    }
    /** {@inheritDoc TilesetSource.getValue} */
    getValue(key) {
        if (!(0, defined_1.defined)(this.fd) || !this.zipIndex) {
            throw new TilesetError_1.TilesetError("Source is not opened. Call 'open' first.");
        }
        const entryData = ArchiveFunctions3tz_1.ArchiveFunctions3tz.readEntryData(this.fd, this.zipIndex, key);
        return entryData;
    }
    /** {@inheritDoc TilesetSource.close} */
    close() {
        if (!(0, defined_1.defined)(this.fd) || !this.zipIndex) {
            throw new TilesetError_1.TilesetError("Source is not opened. Call 'open' first.");
        }
        fs_1.default.closeSync(this.fd);
        this.fd = undefined;
        this.zipIndex = undefined;
    }
}
exports.TilesetSource3tz = TilesetSource3tz;
