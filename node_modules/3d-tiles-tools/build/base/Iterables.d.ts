/// <reference types="node" />
import { PathLike } from "fs";
/**
 * Utility methods for iterable objects.
 *
 * @internal
 */
export declare class Iterables {
    /**
     * Creates a generator that allows iterating over all files
     * in the given directory, and its subdirectories if
     * `recurse` is `true`.
     *
     * @param directory - The directory
     * @param recurse - Whether the files should
     * be listed recursively
     * @returns The generator for path strings
     */
    static overFiles(directory: string | PathLike, recurse: boolean): IterableIterator<string>;
    /**
     * Returns filtered view on the given iterable
     *
     * @param iterable - The iterable
     * @param include - The include predicate
     * @returns The filtered iterable
     */
    static filter<T>(iterable: IterableIterator<T>, include: (element: T) => boolean): {
        [Symbol.iterator](): any;
        next(): IteratorResult<T, void>;
    };
    /**
     * Creates an iterable from the given one, applying the
     * given function to each element.
     *
     * @param iterable - The iterable object
     * @param mapper - The mapper function
     * @returns The mapped iterable
     */
    static map<S, T>(iterable: IterableIterator<S>, mapper: (element: S) => T): IterableIterator<T>;
}
//# sourceMappingURL=Iterables.d.ts.map