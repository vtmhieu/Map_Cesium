import { ResourceResolver } from "../io/ResourceResolver";
import { TreeCoordinates } from "../spatial/TreeCoordinates";
import { TileImplicitTiling } from "../structure/TileImplicitTiling";
import { Schema } from "../structure/Metadata/Schema";
import { SubtreeModel } from "./SubtreeModel";
/**
 * Methods to resolve subtree information.
 *
 * The methods will resolve the data for a subtree, based on the template
 * URI from the implicit tiling and the root coordinates of the subtree,
 * and offer this information as `SubtreeModel` objects.
 *
 * @internal
 */
export declare class SubtreeModels {
    /**
     * Resolve the `SubtreeModel` for the subtree with the given root coordinates.
     *
     * This will substitute the given coordinates into the subtree template
     * URI from the given implicit tiling object. Then it will attempt to load
     * the subtree data from this URI. The resulting data will be used to
     * construct the `SubtreeModel` object.
     *
     * @param implicitTiling - The `TileImplicitTiling`
     * @param schema - The optional metadata schema
     * @param resourceResolver - The `ResourceResolver` for the subtree
     * files and buffers
     * @param coordinates - The root coordinates of the subtree
     * @returns The `SubtreeModel`
     * @throws ImplicitTilingError If the input was structurally invalid
     */
    static resolve(implicitTiling: TileImplicitTiling, schema: Schema | undefined, resourceResolver: ResourceResolver, coordinates: TreeCoordinates): Promise<SubtreeModel>;
    /**
     * Creates the `SubtreeModel` from the given binary subtree data
     *
     * @param binarySubtreeData - The binary subtree data
     * @param implicitTiling - The `TileImplicitTiling`
     * @param schema - The optional metadata schema
     * @returns The `SubtreeModel`
     * @throws ImplicitTilingError If the input was structurally invalid
     */
    private static create;
}
//# sourceMappingURL=SubtreeModels.d.ts.map