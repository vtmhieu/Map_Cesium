import { BoundingVolume } from "../../structure/BoundingVolume";
/**
 * Methods to derive bounding volumes of implicit tiles.
 *
 * Largely ported from CesiumJS Implicit3DTileContent.js
 *
 * @internal
 */
export declare class BoundingVolumeDerivation {
    /**
     * Given the coordinates of a tile, derive its bounding volume from the root.
     *
     * @param rootBoundingVolume - The root bounding volume
     * @param implicitCoordinates - The coordinates of the child tile, as an
     * array [level,x,y] for quadtrees or [level,x,y,z] for octrees.
     * @returns An object containing the JSON for a bounding volume,
     * or `undefined` if the given bounding volume was of a type from
     * which no other bounding volume can be derived (i.e. when it
     * was a bounding sphere)
     */
    static deriveBoundingVolume(rootBoundingVolume: BoundingVolume, implicitCoordinates: number[]): BoundingVolume | undefined;
    /**
     * Check if a specific extension is present on a JSON object. This can be used
     * for either 3D Tiles extensions or glTF extensions
     * @param json - The JSON object
     * @param extensionName - The name of the extension, e.g. '3DTILES_implicit_tiling'
     * @returns True if the extension is present
     * @internal
     */
    private static hasExtension;
    private static readonly scratchScaleFactors;
    private static readonly scratchRootCenter;
    private static readonly scratchCenter;
    private static readonly scratchHalfAxes;
    /**
     * Derive a bounding volume for a descendant tile (child, grandchild, etc.),
     * assuming a quadtree or octree implicit tiling scheme. The (level, x, y, [z])
     * coordinates are given to select the descendant tile and compute its position
     * and dimensions.
     * <p>
     * If z is present, octree subdivision is used. Otherwise, quadtree subdivision
     * is used. Quadtrees are always divided at the midpoint of the the horizontal
     * dimensions, i.e. (x, y), leaving the z axis unchanged.
     * </p>
     * <p>
     * This computes the child volume directly from the root bounding volume rather
     * than recursively subdividing to minimize floating point error.
     * </p>
     *
     * @param rootBox - An array of 12 numbers representing the bounding box of the root tile
     * @param level - The level of the descendant tile relative to the root implicit tile
     * @param x - The x coordinate of the descendant tile
     * @param y - The y coordinate of the descendant tile
     * @param z - The z coordinate of the descendant tile (octree only)
     * @returns An array of 12 numbers representing the bounding box of the descendant tile.
     */
    private static deriveBoundingBox;
    private static readonly scratchRectangle;
    /**
     * Derive a bounding volume for a descendant tile (child, grandchild, etc.),
     * assuming a quadtree or octree implicit tiling scheme. The (level, x, y, [z])
     * coordinates are given to select the descendant tile and compute its position
     * and dimensions.
     * <p>
     * If z is present, octree subdivision is used. Otherwise, quadtree subdivision
     * is used. Quadtrees are always divided at the midpoint of the the horizontal
     * dimensions, i.e. (mid_longitude, mid_latitude), leaving the height values
     * unchanged.
     * </p>
     * <p>
     * This computes the child volume directly from the root bounding volume rather
     * than recursively subdividing to minimize floating point error.
     * </p>
     * @param rootRegion - An array of 6 numbers representing the root implicit tile
     * @param level - The level of the descendant tile relative to the root implicit tile
     * @param x - The x coordinate of the descendant tile
     * @param y - The x coordinate of the descendant tile
     * @param z - The z coordinate of the descendant tile (octree only)
     * @returns An array of 6 numbers representing the bounding region of the descendant tile
     * @internal
     */
    private static deriveBoundingRegion;
    /**
     * Derive a bounding volume for a descendant tile (child, grandchild, etc.),
     * assuming a quadtree or octree implicit tiling scheme. The (level, x, y, [z])
     * coordinates are given to select the descendant tile and compute its position
     * and dimensions.
     * <p>
     * If z is present, octree subdivision is used. Otherwise, quadtree subdivision
     * is used. Quadtrees are always divided at the midpoint of the the horizontal
     * dimensions, i.e. (x, y), leaving the z axis unchanged.
     * </p>
     *
     * @param level - The level of the descendant tile relative to the root implicit tile
     * @param x - The x coordinate of the descendant tile
     * @param y - The y coordinate of the descendant tile
     * @param z - The z coordinate of the descendant tile (octree only)
     * @returns The new bounding volume
     * @internal
     */
    private static deriveBoundingVolumeS2;
}
//# sourceMappingURL=BoundingVolumeDerivation.d.ts.map