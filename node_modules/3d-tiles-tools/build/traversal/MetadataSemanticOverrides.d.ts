import { Tile } from "../structure/Tile";
import { Content } from "../structure/Content";
import { Schema } from "../structure/Metadata/Schema";
import { SubtreeMetadataModel } from "./SubtreeMetadataModel";
/**
 * Methods for overriding properties in `Tile` and `Content` objects,
 * based on metadata semantics.
 *
 * @internal
 */
export declare class MetadataSemanticOverrides {
    /**
     * Perform the overrides of the properties of the given tile that
     * are given by metadata semantics.
     *
     * If the given tile contains a `MetadataEntity`, then the property
     * values of that metadata entity are examined. The property values
     * that have a semantic will be used to override the corresponding
     * values in the given tile.
     *
     * For example, when the metadata entity has a property with the
     * semantic `TILE_GEOMETRIC_ERROR`, then the `geometricError` in
     * the given tile will be replaced with the corresponding value
     * from the metadata entity.
     *
     * @param tile - The tile
     * @param schema - The metadata schema
     * @throws ImplicitTilingError If the input (for example, the
     * schema and the metadata entity) are not structurally valid.
     */
    static applyExplicitTileMetadataSemanticOverrides(tile: Tile, schema: Schema): void;
    /**
     * Perform the overrides of the properties of the given content that
     * are given by metadata semantics.
     *
     * If the given content contains `MetadataEntity`, then the property
     * values of that metadata entity are examined. The property values
     * that have a semantic will be used to override the corresponding
     * values in the given content.
     *
     * @param content - The content
     * @param schema - The metadata schema
     * @throws ImplicitTilingError If the input (for example, the
     * schema and the metadata entity) are not structurally valid.
     */
    static applyExplicitContentMetadataSemanticOverrides(content: Content, schema: Schema): void;
    /**
     * Perform the overrides of the properties of the given tile that
     * are given by metadata semantics.
     *
     * If the given subtreeMetadataModel contains tile metadata, then
     * the values of the metadata entity for the given tile are examined.
     * The property values that have a semantic will be used to override
     * the corresponding values in the given tile.
     *
     * @param tile - The tile
     * @param tileIndex - The tile index (referring to availability indexing)
     * @param subtreeMetadataModel - The `SubtreeMetadataModel`
     * @throws ImplicitTilingError If the input (for example, the
     * schema and the metadata entity) are not structurally valid.
     */
    static applyImplicitTileMetadataSemanticOverrides(tile: Tile, tileIndex: number, subtreeMetadataModel: SubtreeMetadataModel): void;
    /**
     * Perform the overrides of the properties of the given content that
     * are given by metadata semantics.
     *
     * If the given subtreeMetadataModel contains content metadata, then
     * the values of the metadata entity for the given content are examined.
     * The property values that have a semantic will be used to override
     * the corresponding values in the given content.
     *
     * @param content - The content
     * @param contentSetIndex - The content set index, which is `0` for
     * single contents, `0` or `1` for two contents, and so on.
     * @param tileIndex - The tile index (referring to availability indexing)
     * @param subtreeMetadataModel - The `SubtreeMetadataModel`
     * @throws ImplicitTilingError If the input (for example, the
     * schema and the metadata entity) are not structurally valid.
     */
    static applyImplicitContentMetadataSemanticOverrides(content: Content, contentSetIndex: number, tileIndex: number, subtreeMetadataModel: SubtreeMetadataModel): void;
    /**
     * Applies all overrides to the given tile, based in the property
     * values that are found in the given metadata entity model.
     *
     * @param tile - The tile that will be modified
     * @param metadataEntityModel - The `MetadataEntityModel`
     */
    private static applyToTile;
    /**
     * Applies all overrides to the given content, based in the property
     * values that are found in the given metadata entity model.
     *
     * @param content - The content that will be modified
     * @param metadataEntityModel - The `MetadataEntityModel`
     */
    private static applyToContent;
}
//# sourceMappingURL=MetadataSemanticOverrides.d.ts.map