import { TilesetStage } from "./TilesetStage";
/**
 * Methods to execute `TilesetStage` objects.
 */
export declare class TilesetStageExecutor {
    /**
     * Executes the given `TilesetStage`.
     *
     * @param tilesetStage - The `TilesetStage` object
     * @param currentInput - The current input name, or a temporary
     * name for intermediate steps (see `Pipeline.input` for details)
     * @param currentOutput - The current output name, or a temporary
     * name for intermediate steps (see `Pipeline.input` for details)
     * @param overwrite - Whether outputs should be overwritten if
     * they already exist
     * @returns A promise that resolves when the process is finished
     * @throws PipelineError If one of the processing steps causes
     * an error.
     */
    static executeTilesetStage(tilesetStage: TilesetStage, currentInput: string, currentOutput: string, overwrite: boolean): Promise<void>;
    /**
     * Implementation for `executeTilesetStage`.
     *
     * For details about the arguments, see `executeTilesetStage`.
     *
     * @param tilesetStage - The `TilesetStage` object
     * @param currentInput - The current input name
     * @param currentOutput - The current output name
     * @param overwrite - Whether outputs should be overwritten
     * @returns A promise that resolves when the process is finished
     * @throws Error If one of the processing steps causes
     * an error.
     */
    private static executeTilesetStageInternal;
    /**
     * Performs the 'gzip' tileset stage with the given parameters.
     *
     * This will process all entries of the source tileset. The
     * data of entries that match the given condition will be
     * compressed with gzip. Other entries remain unaffected.
     *
     * @param currentInput - The current input name
     * @param currentOutput - The current output name
     * @param overwrite - Whether outputs should be overwritten
     * @param condition The condition that was created from
     * the included- and excluded types that have been defined
     * in the `ContentStage`.
     * @returns A promise that resolves when the process is finished
     * @throws Error If one of the processing steps causes
     * an error.
     */
    private static executeGzip;
    /**
     * Performs the 'gunzip' tileset stage with the given parameters.
     *
     * This will process all entries of the source tileset. The
     * data of entries that is compressed with gzip will be
     * uncompressed. Other entries remain unaffected.
     *
     * @param currentInput - The current input name
     * @param currentOutput - The current output name
     * @param overwrite - Whether outputs should be overwritten
     * @returns A promise that resolves when the process is finished
     * @throws Error If one of the processing steps causes
     * an error.
     */
    private static executeGunzip;
    /**
     * Execute all `ContentStage` objects in the given `TilesetStage`.
     *
     * For details about the arguments, see `executeTilesetStage`.
     *
     * @param tilesetStage - The `TilesetStage` object
     * @param currentInput - The current input name
     * @param currentOutput - The current output name
     * @param overwrite - Whether outputs should be overwritten
     * @returns A promise that resolves when the process is finished
     * @throws Error If one of the processing steps causes
     * an error.
     */
    private static executeTilesetContentStages;
}
//# sourceMappingURL=TilesetStageExecutor.d.ts.map