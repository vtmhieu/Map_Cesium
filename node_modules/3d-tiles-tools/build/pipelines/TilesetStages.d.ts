import { ContentStage } from "./ContentStage";
import { TilesetStage } from "./TilesetStage";
/**
 * Methods to create `TilesetStage` objects.
 */
export declare class TilesetStages {
    /**
     * The `name` that identifies the "gzip" tileset stage
     */
    static readonly TILESET_STAGE_GZIP = "gzip";
    /**
     * The `name` that identifies the "ungzip" tileset stage
     */
    static readonly TILESET_STAGE_UNGZIP = "ungzip";
    /**
     * The `name` that identifies the "combine" tileset stage
     */
    static readonly TILESET_STAGE_COMBINE = "combine";
    /**
     * The `name` that identifies the "upgrade" tileset stage
     */
    static readonly TILESET_STAGE_UPGRADE = "upgrade";
    /**
     * Creates a tileset stage that performs the "gzip" operation
     *
     * @param - The array of `ContentDataType` strings that the operation
     * should be applied to (or `undefined` if it should be applied to
     * all data types)
     * @returns The tileset stage
     */
    static createGzip(includedContentTypes: string[] | undefined): TilesetStage;
    /**
     * Creates a content stage that performs the "ungzip" operation
     *
     * @returns The content stage
     */
    static createUngzip(): ContentStage;
    /**
     * Creates a tileset stage that performs the "upgrade" operation
     *
     * @returns The tileset stage
     */
    static createUpgrade(): TilesetStage;
    /**
     * Creates a tileset stage that performs the "combine" operation
     *
     * @returns The tileset stage
     */
    static createCombine(): TilesetStage;
    /**
     * Creates a tileset stage from the given parameters.
     *
     * @param name - The `name` of the tileset stage
     * @param description - The `description` of the tileset stage
     * @param contentStages - The content stages
     * @returns The tileset stage
     */
    static create(name: string, description: string, contentStages: ContentStage[]): TilesetStage;
    /**
     * Creates a `TilesetStage` object from the given (untyped) JSON.
     *
     * @param tilesetStageJson - The JSON object
     * @returns The `TilesetStage` object
     * @throws DeveloperError When the input was not valid
     */
    static createTilesetStage(tilesetStageJson: any): TilesetStage;
}
//# sourceMappingURL=TilesetStages.d.ts.map