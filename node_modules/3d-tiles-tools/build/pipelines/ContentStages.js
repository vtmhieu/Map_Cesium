"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentStages = void 0;
const defined_1 = require("../base/defined");
const DeveloperError_1 = require("../base/DeveloperError");
/**
 * Methods to create `ContentStage` objects
 */
class ContentStages {
    /**
     * Creates a content stage that performs the "glbToB3dm" operation
     *
     * @returns The content stage
     */
    static createGlbToB3dm() {
        const contentStage = {
            name: ContentStages.CONTENT_STAGE_GLB_TO_B3DM,
            description: "Convert each GLB into a default B3DM",
        };
        return contentStage;
    }
    /**
     * Creates a content stage that performs the "glbToI3dm" operation
     *
     * @returns The content stage
     */
    static createGlbToI3dm() {
        const contentStage = {
            name: ContentStages.CONTENT_STAGE_GLB_TO_I3DM,
            description: "Convert each GLB into a default I3DM",
        };
        return contentStage;
    }
    /**
     * Creates a content stage that performs the "b3dmToGlb" operation
     *
     * @returns The content stage
     */
    static createB3dmToGlb() {
        const contentStage = {
            name: ContentStages.CONTENT_STAGE_B3DM_TO_GLB,
            description: "Convert each B3DM content into GLB",
        };
        return contentStage;
    }
    /**
     * Creates a content stage that performs the "i3dmToGlb" operation
     *
     * @returns The content stage
     */
    static createI3dmToGlb() {
        const contentStage = {
            name: ContentStages.CONTENT_STAGE_I3DM_TO_GLB,
            description: "Convert each I3DM content into GLB",
        };
        return contentStage;
    }
    /**
     * Creates a content stage that performs the "optimizeGlb" operation
     *
     * @returns The content stage
     */
    static createOptimizeB3dm(options) {
        const contentStage = {
            name: ContentStages.CONTENT_STAGE_OPTIMIZE_B3DM,
            description: "Apply gltf-pipeline to the GLB part of each B3DM content, with the given options",
            options: options,
        };
        return contentStage;
    }
    /**
     * Creates a content stage that performs the "optimizeI3dm" operation
     *
     * @returns The content stage
     */
    static createOptimizeI3dm(options) {
        const contentStage = {
            name: ContentStages.CONTENT_STAGE_OPTIMIZE_B3DM,
            description: "Apply gltf-pipeline to the GLB part of each I3DM content, with the given options",
            options: options,
        };
        return contentStage;
    }
    /**
     * Creates a content stage that performs the "optimizeGlb" operation
     *
     * @returns The content stage
     */
    static createOptimizeGlb(options) {
        const contentStage = {
            name: ContentStages.CONTENT_STAGE_OPTIMIZE_GLB,
            description: "Apply gltf-pipeline to each GLB content, with the given options",
            options: options,
        };
        return contentStage;
    }
    /**
     * Creates a content stage that performs the "separateGlb" operation
     *
     * @returns The content stage
     */
    static createSeparateGltf() {
        const contentStage = {
            name: ContentStages.CONTENT_STAGE_SEPARATE_GLTF,
            description: "Convert each GLB content into a .gltf file with separate resources",
        };
        return contentStage;
    }
    /**
     * Creates a `ContentStage` object from the given (untyped) JSON.
     *
     * @param contentStageJson - The JSON object
     * @returns The `ContentStage` object
     * @throws DeveloperError When the input was not valid
     */
    static createContentStage(contentStageJson) {
        if (typeof contentStageJson === "string") {
            const contentStage = {
                name: contentStageJson,
            };
            return contentStage;
        }
        const contentStage = contentStageJson;
        if (!(0, defined_1.defined)(contentStage.name)) {
            throw new DeveloperError_1.DeveloperError("The contentStage JSON does not define a name");
        }
        return contentStage;
    }
}
exports.ContentStages = ContentStages;
/**
 * The `name` that identifies the "glbToB3dm" content stage
 */
ContentStages.CONTENT_STAGE_GLB_TO_B3DM = "glbToB3dm";
/**
 * The `name` that identifies the "glbToI3dm" content stage
 */
ContentStages.CONTENT_STAGE_GLB_TO_I3DM = "glbToI3dm";
/**
 * The `name` that identifies the "b3dmToGlb" content stage
 */
ContentStages.CONTENT_STAGE_B3DM_TO_GLB = "b3dmToGlb";
/**
 * The `name` that identifies the "i3dmToGlb" content stage
 */
ContentStages.CONTENT_STAGE_I3DM_TO_GLB = "i3dmToGlb";
/**
 * The `name` that identifies the "optimizeB3dm" content stage
 */
ContentStages.CONTENT_STAGE_OPTIMIZE_B3DM = "optimizeB3dm";
/**
 * The `name` that identifies the "optimizeI3dm" content stage
 */
ContentStages.CONTENT_STAGE_OPTIMIZE_I3DM = "optimizeI3dm";
/**
 * The `name` that identifies the "optimizeGlb" content stage
 */
ContentStages.CONTENT_STAGE_OPTIMIZE_GLB = "optimizeGlb";
/**
 * The `name` that identifies the "separateGltf" content stage
 */
ContentStages.CONTENT_STAGE_SEPARATE_GLTF = "separateGltf";
