import { Content } from "../structure/Content";
import { Tile } from "../structure/Tile";
import { TileTraversalCallback } from "./TileTraversalCallback";
/**
 * Utility methods related to tiles, given as `Tile` objects.
 */
export declare class Tiles {
    /**
     * Obtains the contents from the given tile.
     *
     * This will either return a single-element array, when the tile
     * defined `tile.content`, or a multi-element array, when the tile
     * defined `tile.contents`, or an empty array, when the tile does
     * not have contents.
     *
     * @param tile The `Tile`
     * @returns The content URIs
     */
    static getContents(tile: Tile): Content[];
    /**
     * Obtains the content URIs from the given tile.
     *
     * This will either return a single-element array, when the tile
     * defined `tile.content`, or a multi-element array, when the tile
     * defined `tile.contents`. It also takes into account the case
     * that the (legacy) `tile.content.url` property may have been
     * used. In this case, a warning will be printed, and the `url`
     * will be returned.
     *
     * @param tile The `Tile`
     * @returns The content URIs
     */
    static getContentUris(tile: Tile): string[];
    /**
     * Traverses a tile hierarchy, starting at the given `Tile`, and
     * calls the given callback at each step.
     *
     * This only traverses the explicit tile hierarchy that is
     * stored in the tileset JSON. It does not traverse implicit
     * tiles.
     *
     * The callback will receive the current stack of tiles (i.e. the
     * last element of the `tilePath` array is the currently visited
     * tile). Callers may NOT modify that array. The callback should
     * return whether the traversal should continue at the current
     * tile.
     *
     * @param tile - The `Tile` to start the traversal at
     * @param callback - The callback for the tile stack
     * @returns A promise that resolves when the traversal is finished
     */
    static traverseExplicit(tile: Tile, callback: TileTraversalCallback): Promise<void>;
    /**
     * Internal method for `traverseExplicit`, called recursively.
     *
     * @param tile - The `Tile` to start the traversal at
     * @param stack - The current tile stack
     * @param callback - The callback for the tile stack
     */
    private static traverseExplicitInternal;
}
//# sourceMappingURL=Tiles.d.ts.map