/// <reference types="node" />
/**
 * Internal utility methods related to glTF/GLB data.
 */
export declare class GltfUtilities {
    /**
     * Upgrades the binary glTF (GLB) data in the given buffer.
     *
     * The exact pre- and postconditions of this is are intentionally
     * not specified. But it is mainly used for updating a limited
     * subset of glTF 1.0 binary data to glTF 2.0.
     *
     * @param glbBuffer - The buffer containing the GLB
     * @param options - Options for the upgrade that are passed to
     * `gltf-pipeline`
     * @returns A promise that resolves with the upgraded GLB.
     */
    static upgradeGlb(glbBuffer: Buffer, options: any): Promise<Buffer>;
    /**
     * Extract the JSON part from the given GLB buffer and return it
     * as a buffer.
     *
     * The given buffer may contain glTF 2.0 binary data, or glTF 1.0
     * binary data.
     *
     * Note that this does NOT convert the input data. It only extracts
     * the data, as-it-is.
     *
     * @param glbBuffer - The buffer containing the GLB
     * @returns The JSON buffer
     * @throws TileFormatError If the input does not contain valid GLB data.
     */
    static extractJsonFromGlb(glbBuffer: Buffer): Buffer;
    /**
     * Given an input buffer containing a binary glTF asset, optimize it
     * using gltf-pipeline with the provided options.
     *
     * This method also performs a few updates of certain legacy
     * features that are specific for the GLB data that is part
     * of I3DM and B3DM. Details are not specified here.
     *
     * @param glbBuffer The buffer containing the binary glTF.
     * @param options Options specifying custom gltf-pipeline behavior.
     * @returns A promise that resolves to the optimized binary glTF.
     */
    static optimizeGlb(glbBuffer: Buffer, options: any): Promise<Buffer>;
    /**
     * Given an input buffer containing a binary glTF asset, remove
     * its use of the `CESIUM_RTC` extension by inserting new nodes
     * (above the former root nodes) that contain the RTC center as
     * their translation.
     *
     * @param glbBuffer The buffer containing the binary glTF.
     * @returns A promise that resolves to the resulting binary glTF.
     */
    static replaceCesiumRtcExtension(glbBuffer: Buffer): Promise<any>;
    /**
     * Replaces the `CESIUM_RTC` extension in the given glTF object.
     *
     * This will insert a new parent node above each root node of
     * a scene. These new parent nodes will have a `translation`
     * that is directly taken from the `CESIUM_RTC` `center`.
     *
     * The `CESIUM_RTC` extension object and its used/required
     * usage declarations will be removed.
     *
     * @param gltf - The glTF object
     */
    private static replaceCesiumRtcExtensionInternal;
}
//# sourceMappingURL=GtlfUtilities.d.ts.map