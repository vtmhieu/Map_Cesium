"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TilesetSourceFs = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const Paths_1 = require("../base/Paths");
const Iterables_1 = require("../base/Iterables");
const TilesetError_1 = require("./TilesetError");
/**
 * Implementation of a TilesetSource based on a directory
 * in a file system
 *
 * @internal
 */
class TilesetSourceFs {
    /**
     * Default constructor
     */
    constructor() {
        this.fullInputName = undefined;
    }
    /** {@inheritDoc TilesetSource.open} */
    open(fullInputName) {
        if (this.fullInputName) {
            throw new TilesetError_1.TilesetError("Source already opened");
        }
        this.fullInputName = fullInputName;
    }
    /** {@inheritDoc TilesetSource.getKeys} */
    getKeys() {
        if (!this.fullInputName) {
            throw new TilesetError_1.TilesetError("Source is not opened. Call 'open' first.");
        }
        const files = Iterables_1.Iterables.overFiles(this.fullInputName, true);
        const fullInputName = this.fullInputName;
        return Iterables_1.Iterables.map(files, (file) => Paths_1.Paths.relativize(fullInputName, file));
    }
    /** {@inheritDoc TilesetSource.getValue} */
    getValue(key) {
        if (!this.fullInputName) {
            throw new TilesetError_1.TilesetError("Source is not opened. Call 'open' first.");
        }
        const fullFileName = path_1.default.join(this.fullInputName, key);
        if (!fs_1.default.existsSync(fullFileName)) {
            return undefined;
        }
        const data = fs_1.default.readFileSync(fullFileName);
        if (data === null) {
            return undefined;
        }
        return data;
    }
    /** {@inheritDoc TilesetSource.close} */
    close() {
        if (!this.fullInputName) {
            throw new TilesetError_1.TilesetError("Source is not opened. Call 'open' first.");
        }
        this.fullInputName = undefined;
    }
}
exports.TilesetSourceFs = TilesetSourceFs;
