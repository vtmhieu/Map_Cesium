"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TilesetSources = void 0;
const path_1 = __importDefault(require("path"));
const Iterables_1 = require("../base/Iterables");
const TilesetSource3tz_1 = require("../packages/TilesetSource3tz");
const TilesetSource3dtiles_1 = require("../packages/TilesetSource3dtiles");
const TilesetError_1 = require("./TilesetError");
const TilesetSourceFs_1 = require("./TilesetSourceFs");
/**
 * Methods related to `TilesetSource` instances
 *
 * @internal
 */
class TilesetSources {
    /**
     * Create and open a source for the given name.
     *
     * The given name may have the extension `.3tz` or `.3dtiles`,
     * or no extension to indicate a directory.
     *
     * If the given name as the extension `.json`, then a source
     * for the directory that contains the given file is created.
     *
     * @param name - The name
     * @returns The `TilesetSource`
     * @throws TilesetError If the input can not be opened
     */
    static createAndOpen(name) {
        let extension = path_1.default.extname(name).toLowerCase();
        if (extension === ".json") {
            extension = "";
            name = path_1.default.dirname(name);
        }
        const tilesetSource = TilesetSources.create(extension);
        if (!tilesetSource) {
            throw new TilesetError_1.TilesetError(`Could not create tileset source for name ${name} with extension "${extension}"`);
        }
        tilesetSource.open(name);
        return tilesetSource;
    }
    /**
     * Creates a TilesetSource, based on the given
     * file extension
     *
     * @param extension - The extension: '.3tz' or '.3dtiles'
     * or the empty string (for a directory)
     * @returns The TilesetSource, or `undefined` if the extension
     * is invalid
     */
    static create(extension) {
        if (extension === ".3tz") {
            return new TilesetSource3tz_1.TilesetSource3tz();
        }
        if (extension === ".3dtiles") {
            return new TilesetSource3dtiles_1.TilesetSource3dtiles();
        }
        if (extension === "") {
            return new TilesetSourceFs_1.TilesetSourceFs();
        }
        console.log("Unknown tileset source type: " + extension);
        return undefined;
    }
    /**
     * Returns an iterable iterator over the entries of the given
     * tileset source.
     *
     * @param tilesetSource - The `TilesetSource`
     * @returns The iterator over the entries
     */
    static getEntries(tilesetSource) {
        const keys = tilesetSource.getKeys();
        const entries = Iterables_1.Iterables.map(keys, (k) => {
            const v = tilesetSource.getValue(k);
            if (!v) {
                throw new TilesetError_1.TilesetError(`No value found for key ${k}`);
            }
            const e = {
                key: k,
                value: v,
            };
            return e;
        });
        return entries;
    }
}
exports.TilesetSources = TilesetSources;
