import { TilesetEntry } from "./TilesetEntry";
import { TilesetSource } from "./TilesetSource";
/**
 * Methods related to `TilesetSource` instances
 *
 * @internal
 */
export declare class TilesetSources {
    /**
     * Create and open a source for the given name.
     *
     * The given name may have the extension `.3tz` or `.3dtiles`,
     * or no extension to indicate a directory.
     *
     * If the given name as the extension `.json`, then a source
     * for the directory that contains the given file is created.
     *
     * @param name - The name
     * @returns The `TilesetSource`
     * @throws TilesetError If the input can not be opened
     */
    static createAndOpen(name: string): TilesetSource;
    /**
     * Creates a TilesetSource, based on the given
     * file extension
     *
     * @param extension - The extension: '.3tz' or '.3dtiles'
     * or the empty string (for a directory)
     * @returns The TilesetSource, or `undefined` if the extension
     * is invalid
     */
    static create(extension: string): TilesetSource | undefined;
    /**
     * Returns an iterable iterator over the entries of the given
     * tileset source.
     *
     * @param tilesetSource - The `TilesetSource`
     * @returns The iterator over the entries
     */
    static getEntries(tilesetSource: TilesetSource): IterableIterator<TilesetEntry>;
}
//# sourceMappingURL=TilesetSources.d.ts.map