/// <reference types="node" />
import { TilesetSource } from "./TilesetSource";
import { TilesetTarget } from "./TilesetTarget";
/**
 * Implementation of a TilesetSource and TilesetTarget that
 * stores the data in memory.
 *
 * This is mainly intended for tests and debugging.
 *
 * @internal
 */
export declare class TilesetInMemory implements TilesetSource, TilesetTarget {
    /**
     * The mapping from keys to the actual data
     */
    private readonly dataMap;
    /**
     * Whether this source has already been opened
     */
    private sourceIsOpen;
    /**
     * Whether this target has already been opened
     */
    private targetIsOpen;
    /**
     * The overwrite flag for the target
     */
    private overwrite;
    /**
     * Default constructor
     */
    constructor();
    /** {@inheritDoc TilesetSource.open} */
    open(fullInputName: string): void;
    /** {@inheritDoc TilesetSource.getKeys} */
    getKeys(): IterableIterator<string>;
    /** {@inheritDoc TilesetSource.getValue} */
    getValue(key: string): Buffer | undefined;
    /** {@inheritDoc TilesetSource.close} */
    close(): void;
    /** {@inheritDoc TilesetTarget.begin} */
    begin(fullOutputName: string, overwrite: boolean): void;
    /** {@inheritDoc TilesetTarget.addEntry} */
    addEntry(key: string, content: Buffer): void;
    /** {@inheritDoc TilesetTarget.end} */
    end(): Promise<void>;
}
//# sourceMappingURL=TilesetInMemory.d.ts.map