/// <reference types="node" />
import { BinaryBufferStructure } from "./BinaryBufferStructure";
import { BinaryBufferData } from "./BinaryBufferData";
/**
 * Methods related to binary buffers.
 *
 * This class can be used for building a basic `BinaryBufferData` structure
 * from a sequence of buffers that represent buffer views.
 *
 * @internal
 */
export declare class BinaryBuffers {
    /**
     * Add a set of buffer views to the given `BinaryBufferData`, and return
     * a `BinaryBufferStructure` that describes their layout.
     *
     * This will combine the given buffer views into a single buffer, and add the
     * buffer views and the generated buffer to the given `BinaryBufferData`.
     *
     * The layout (byte offset and lengths, and the `buffer` index) will be
     * returned via the `BinaryBufferStructure`.
     *
     * NOTE: This function could be generalized in many ways. Right now, it
     * creates a single `BufferObject` for the given data, without a `uri`.
     * Further configuration options might be added in the future.
     *
     * @param binaryBufferData - The `BinaryBufferData`
     * @param newBufferViewsData - The buffer views that should be added
     * @returns A `BinaryBufferStructure` that describes the structure
     * of the buffer views, after they have been assembled into a buffer.
     */
    static createBinaryBufferStructure(binaryBufferData: BinaryBufferData, newBufferViewsData: Buffer[]): BinaryBufferStructure;
}
//# sourceMappingURL=BinaryBuffers.d.ts.map