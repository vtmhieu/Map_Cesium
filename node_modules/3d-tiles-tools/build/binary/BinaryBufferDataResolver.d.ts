/// <reference types="node" />
import { ResourceResolver } from "../io/ResourceResolver";
import { BinaryBufferData } from "./BinaryBufferData";
import { BinaryBufferStructure } from "./BinaryBufferStructure";
/**
 * A class for resolving binary buffer data.
 *
 * @internal
 */
export declare class BinaryBufferDataResolver {
    /**
     * Resolves the buffer data that is defined in the given structure.
     *
     * It receives a `BinaryBufferStructure` that contains the
     * `BufferObject` and `BufferView` definitions, resolves the
     * data from the buffer URIs using the given resource resolver,
     * and returns a `BinaryBufferData` that contains the actual
     * binary buffer data.
     *
     * The given `binaryBuffer` will be used as the buffer data
     * for any buffer that does not have a URI (intended for
     * binary subtree files))
     *
     * @param binaryBufferStructure - The `BinaryBufferStructure`
     * @param binaryBuffer - The optional binary buffer
     * @param resourceResolver - The `ResourceResolver`
     * @returns The `BinaryBufferData`
     * @throws BinaryDataError If the data could not be resolved
     */
    static resolve(binaryBufferStructure: BinaryBufferStructure, binaryBuffer: Buffer | undefined, resourceResolver: ResourceResolver): Promise<BinaryBufferData>;
}
//# sourceMappingURL=BinaryBufferDataResolver.d.ts.map