import { Tileset } from "../structure/Tileset";
/**
 * A class for "upgrading" a tileset from a previous version to
 * a more recent version. The details of what that means exactly
 * are not (yet) specified.
 */
export declare class TilesetUpgrader {
    /**
     * A function that will receive log messages during the upgrade process
     */
    private readonly logCallback;
    /**
     * The tileset source for the input
     */
    private tilesetSource;
    /**
     * The tileset target for the output.
     */
    private tilesetTarget;
    /**
     * The options for the upgrade.
     */
    private readonly upgradeOptions;
    /**
     * The options that may be passed to `gltf-pipeline` when
     * GLB data in B3DM or I3DM is supposed to be upgraded.
     */
    private readonly gltfUpgradeOptions;
    /**
     * Creates a new instance
     *
     * @param quiet - Whether log messages should be omitted
     * @param gltfUpgradeOptions - Options that may be passed
     * to `gltf-pipeline` when GLB data in B3DM or I3DM is
     * supposed to be upgraded.
     */
    constructor(quiet: boolean, gltfUpgradeOptions: any);
    /**
     * Upgrade the specified source tileset, and write it to the given
     * target.
     *
     * @param tilesetSourceName - The tileset source name
     * @param tilesetTargetName - The tileset target name
     * @param overwrite Whether the target should be overwritten if
     * it already exists
     * @returns A promise that resolves when the process is finished
     * @throws TilesetError When the input could not be processed,
     * or when the output already exists and `overwrite` was `false`.
     */
    upgrade(tilesetSourceName: string, tilesetTargetName: string, overwrite: boolean): Promise<void>;
    /**
     * Internal method for the actual upgrade.
     *
     * It just obtains the tileset JSON data from the source, passes
     * it to `upgradeTileset`, and returns the buffer containing the
     * JSON data of the upgraded result.
     *
     * @param tilesetSourceJsonFileName - The name of the tileset JSON in the source
     * @returns A promise that resolves when the process is finished
     * @throws TilesetError When the input could not be processed
     */
    private upgradeInternal;
    /**
     * Upgrades the given tileset, in place.
     *
     * @param tileset - The parsed tileset
     */
    upgradeTileset(tileset: Tileset): Promise<void>;
    /**
     * Upgrade the `asset.version` number in the given tileset
     * to be "1.1".
     *
     * @param tileset - The tileset
     */
    private upgradeAssetVersionNumber;
    /**
     * Upgrade the `url` property of each tile content to `uri`.
     *
     * This will examine each `tile.content` in the explicit representation
     * of the tile hierarchy in the given tileset. If any content does not
     * define a `uri`, but a (legacy) `url` property, then the `url` is
     * renamed to `uri`.
     *
     * @param tileset - The tileset
     */
    private upgradeEachContentUrlToUri;
    /**
     * If the given `Content` does not have a `uri` but uses the
     * legacy `url` property, then a message is logged, and the
     * `url` property is renamed to `uri`.
     *
     * @param content - The `Content`
     */
    private upgradeContentUrlToUri;
    /**
     * Upgrade the `refine` property of each tile to be written in
     * uppercase letters.
     *
     * @param tileset - The tileset
     */
    private upgradeRefineValues;
    /**
     * Upgrade all resources from the tileset source (except for the
     * file with the given name) and put them into the tileset target.
     *
     * @param tilesetSourceJsonFileName - The name of the tileset JSON file
     * in the source
     * @returns A promise that resolves when the process is finished.
     */
    private upgradeResources;
    /**
     * Process the value of an entry (i.e. the data of one file), and return
     * a possibly "upgraded" version of that value.
     *
     * @param key - The key (file name)
     * @param value - The value (file contents buffer)
     * @param type - The type of the content. See `ContentDataTypes`.
     * @returns A promise that resolves when the value is processed.
     */
    private processValue;
    /**
     * For the given B3DM data buffer, extract the GLB, upgrade it
     * with `GltfUtilities.upgradeGlb`, create a new B3DM from the
     * result, and return it.
     *
     * @param inputBuffer - The input buffer
     * @param options - Options that will be passed to the
     * `gltf-pipeline` when the GLB is processed.
     * @returns The upgraded buffer
     */
    private static upgradeB3dmGltf1ToGltf2;
    /**
     * For the given I3DM data buffer, extract the GLB, upgrade it
     * with `GltfUtilities.upgradeGlb`, create a new B3DM from the
     * result, and return it.
     *
     * @param inputBuffer - The input buffer
     * @param options - Options that will be passed to the
     * `gltf-pipeline` when the GLB is processed.
     * @returns The upgraded buffer
     */
    private static upgradeI3dmGltf1ToGltf2;
}
//# sourceMappingURL=TilesetUpgrader.d.ts.map