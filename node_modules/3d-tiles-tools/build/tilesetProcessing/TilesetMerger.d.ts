/**
 * A class for merging multiple tilesets, to create a tileset that refers
 * to the merged ones as external tilesets.
 */
export declare class TilesetMerger {
    /**
     * The tileset sources that have been created from the source names
     */
    private tilesetSources;
    /**
     * The file names for the tileset JSON files.
     *
     * If the inputs are tileset JSON files, then these are the file names.
     * If the inputs are directories or files that do not end with ".json",
     * then these names will default to "tileset.json"
     */
    private tilesetSourceJsonFileNames;
    /**
     * Identifiers for the external tilesets. These will usually
     * be just the last component of the directory name. For example,
     * for a tileset like "./data/example/tileset.json", this will
     * be "example". But the names are disambiguated, just in case...
     */
    private tilesetSourceIdentifiers;
    /**
     * The target that the resulting tileset will be written to.
     */
    private tilesetTarget;
    /**
     * The name of the tileset JSON file in the target.
     * (Usually `tileset.json`)
     */
    private tilesetTargetJsonFileName;
    /**
     * Creates a new instance
     */
    constructor();
    /**
     * Merges the tileset from the specified sources into one tileset
     * that refers to the sources as external ones, and writes the
     * result into the given target.
     *
     * @param tilesetSourceNames - The tileset source names
     * @param tilesetTargetName - The tileset target name
     * @param overwrite - Whether target files should be overwritten
     * @returns A promise that resolves when the process is finished
     * @throws TilesetError When the input could not be processed
     * @throws TilesetError When the output already exists
     * and `overwrite` was `false`.
     */
    merge(tilesetSourceNames: string[], tilesetTargetName: string, overwrite: boolean): Promise<void>;
    /**
     * Internal method for `merge`
     */
    private mergeInternal;
    /**
     * Copy the resources from the source tilesets into the target.
     *
     * This will obtain the entries of all sources, and add them
     * to the target, adding the `tilesetSourceIdentifier` to the
     * path for disambiguation.
     */
    private copyResources;
    /**
     * Creates an identifier that does not exist yet.
     *
     * If the given prefix is not yet contained in the given list,
     * then it is returned. Otherwise, it is made "unique" in an
     * unspecified way, and then returned.
     *
     * This does NOT add the new identifier to the given list!
     *
     * @param prefix - The prefix
     * @param existingIdentifiers - The existing identifiers
     * @returns The new identifier
     */
    private static createIdentifier;
    private static getChildren;
    private static getMergedGeometricError;
    private static getBoundingSphere;
    private static getMergedSphere;
    private static createBoundingSphereFromBox;
    private static createBoundingSphereFromRegion;
    private static createBoundingSphereFromSphere;
}
//# sourceMappingURL=TilesetMerger.d.ts.map