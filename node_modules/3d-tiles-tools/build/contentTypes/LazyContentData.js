"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyContentData = void 0;
const path_1 = __importDefault(require("path"));
const defined_1 = require("../base/defined");
const Buffers_1 = require("../base/Buffers");
/**
 * Lazy implementation of the `ContentData` interface.
 *
 * This implementation tries to obtain the least amount of data that
 * is required for the implementation of the interface methods:
 * It reads the data on demand, from a `ResourceResolver`,
 * caching the data internally for later calls.
 *
 * @internal
 */
class LazyContentData {
    /**
     * Creates a new instance of content data that is defined by
     * the given (usually relative) URI when it is resolved using
     * the given resource resolver.
     *
     * @param uri - The URI of the content data
     * @param resourceResolver - The `ResourceResolver` that will be
     * used for resolving the data from the given URI
     */
    constructor(uri, resourceResolver) {
        this._uri = uri;
        this._resourceResolver = resourceResolver;
        this._extension = path_1.default.extname(uri).toLowerCase();
        this._magic = undefined;
        this._data = null;
        this._dataWasRequested = false;
        this._parsedObject = undefined;
        this._parsedObjectWasRequested = false;
    }
    /** {@inheritDoc ContentData.uri} */
    get uri() {
        return this._uri;
    }
    /** {@inheritDoc ContentData.extension} */
    get extension() {
        return this._extension;
    }
    /** {@inheritDoc ContentData.exists} */
    async exists() {
        if ((0, defined_1.defined)(this._exists)) {
            return this._exists;
        }
        const partialData = await this._resourceResolver.resolveDataPartial(this._uri, 1);
        this._exists = partialData !== null;
        return this._exists;
    }
    /** {@inheritDoc ContentData.getMagic} */
    async getMagic() {
        if ((0, defined_1.defined)(this._magic)) {
            return this._magic;
        }
        const magicHeaderLength = 4;
        const partialData = await this._resourceResolver.resolveDataPartial(this._uri, magicHeaderLength);
        if (partialData) {
            this._magic = Buffers_1.Buffers.getMagicBytes(partialData, 0, magicHeaderLength);
            this._exists = true;
        }
        else {
            this._magic = Buffer.alloc(0);
            this._exists = false;
        }
        return this._magic;
    }
    /** {@inheritDoc ContentData.getData} */
    async getData() {
        if (this._dataWasRequested) {
            return this._data;
        }
        this._data = await this._resourceResolver.resolveData(this._uri);
        this._dataWasRequested = true;
        this._exists = this._data !== null;
        return this._data;
    }
    /** {@inheritDoc ContentData.getParsedObject} */
    async getParsedObject() {
        if (this._parsedObjectWasRequested) {
            return this._parsedObject;
        }
        const data = await this.getData();
        if (!data) {
            this._parsedObject = undefined;
            this._parsedObjectWasRequested = true;
            this._exists = false;
            return this._parsedObject;
        }
        this._exists = true;
        if (!Buffers_1.Buffers.isProbablyJson(data)) {
            this._parsedObject = undefined;
            this._parsedObjectWasRequested = true;
            return this._parsedObject;
        }
        try {
            this._parsedObject = JSON.parse(data.toString());
            return this._parsedObject;
        }
        catch (error) {
            this._parsedObject = undefined;
            this._parsedObjectWasRequested = true;
            return this._parsedObject;
        }
    }
}
exports.LazyContentData = LazyContentData;
