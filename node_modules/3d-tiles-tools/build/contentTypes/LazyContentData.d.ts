/// <reference types="node" />
import { ResourceResolver } from "../io/ResourceResolver";
import { ContentData } from "./ContentData";
/**
 * Lazy implementation of the `ContentData` interface.
 *
 * This implementation tries to obtain the least amount of data that
 * is required for the implementation of the interface methods:
 * It reads the data on demand, from a `ResourceResolver`,
 * caching the data internally for later calls.
 *
 * @internal
 */
export declare class LazyContentData implements ContentData {
    /**
     * The (relative) URI that was given in the constructor.
     * This is resolved using the `_resourceResolver`.
     */
    private readonly _uri;
    /**
     * The file extension from the URI, in lowercase,
     * including the `.` dot.
     */
    private readonly _extension;
    /**
     * The `ResourceResolver` that will be used for resolving
     * the (relative) URI upon request.
     */
    private readonly _resourceResolver;
    /**
     * Whether the content data likely exists at all.
     */
    private _exists;
    /**
     * The "magic header bytes" from the content data. These
     * are the first (up to) 4 bytes of the content data,
     * or the empty buffer if the content data could not
     * be resolved.
     */
    private _magic;
    /**
     * The content data, or `null` if the data could not
     * be resolved.
     */
    private _data;
    /**
     * Whether the `_data` was already requested
     */
    private _dataWasRequested;
    /**
     * The object that was parsed from the content, assuming
     * that the content was JSON. This is `undefined` if the
     * data could not be resolved, or it could not be parsed
     * to JSON.
     */
    private _parsedObject;
    /**
     * Whether the `_parsedObject` was already requested
     */
    private _parsedObjectWasRequested;
    /**
     * Creates a new instance of content data that is defined by
     * the given (usually relative) URI when it is resolved using
     * the given resource resolver.
     *
     * @param uri - The URI of the content data
     * @param resourceResolver - The `ResourceResolver` that will be
     * used for resolving the data from the given URI
     */
    constructor(uri: string, resourceResolver: ResourceResolver);
    /** {@inheritDoc ContentData.uri} */
    get uri(): string;
    /** {@inheritDoc ContentData.extension} */
    get extension(): string;
    /** {@inheritDoc ContentData.exists} */
    exists(): Promise<boolean>;
    /** {@inheritDoc ContentData.getMagic} */
    getMagic(): Promise<Buffer>;
    /** {@inheritDoc ContentData.getData} */
    getData(): Promise<Buffer | null>;
    /** {@inheritDoc ContentData.getParsedObject} */
    getParsedObject(): Promise<any>;
}
//# sourceMappingURL=LazyContentData.d.ts.map