"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferedContentData = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const Buffers_1 = require("../base/Buffers");
/**
 * Implementation of the `ContentData` interface that stores
 * the full content data in a buffer.
 *
 * This could be completely synchronous. But every possibility
 * of anything being "async" causes the promises to be smeared
 * over all interfaces, through all call chains.
 *
 * @internal
 */
class BufferedContentData {
    /**
     * Create content data from the given URI, assuming that it
     * is a file in the local file system.
     *
     * This will try to read the data from the given file, and
     * create a ContentData from that. If the data cannot be
     * read, a warning will be printed, and the method will
     * return a ContentData where `exists` returns `false`.
     *
     * @param uri - The URI
     * @returns The ContentData
     */
    static create(uri) {
        let data = null;
        try {
            data = fs_1.default.readFileSync(uri);
        }
        catch (error) {
            console.warn(`Could not read content data from ${uri}`);
        }
        return new BufferedContentData(uri, data);
    }
    /**
     * Creates a new instance of content data that is defined by
     * the given (usually relative) URI and the given buffer data
     *
     * @param uri - The URI of the content data
     * @param data - The actual content data buffer
     */
    constructor(uri, data) {
        this._uri = uri;
        this._extension = path_1.default.extname(uri).toLowerCase();
        if (data) {
            const magicHeaderLength = 4;
            this._magic = Buffers_1.Buffers.getMagicBytes(data, 0, magicHeaderLength);
        }
        else {
            this._magic = Buffer.alloc(0);
        }
        this._data = data;
        this._parsedObject = undefined;
        this._parsedObjectWasRequested = false;
    }
    /** {@inheritDoc ContentData.uri} */
    get uri() {
        return this._uri;
    }
    /** {@inheritDoc ContentData.extension} */
    get extension() {
        return this._extension;
    }
    /** {@inheritDoc ContentData.exists} */
    async exists() {
        return this._data !== null;
    }
    /** {@inheritDoc ContentData.magic} */
    async getMagic() {
        return this._magic;
    }
    /** {@inheritDoc ContentData.data} */
    async getData() {
        return this._data;
    }
    /** {@inheritDoc ContentData.getParsedObject} */
    async getParsedObject() {
        if (this._parsedObjectWasRequested) {
            return this._parsedObject;
        }
        if (!this._data) {
            this._parsedObject = undefined;
            this._parsedObjectWasRequested = true;
            return this._parsedObject;
        }
        if (!Buffers_1.Buffers.isProbablyJson(this._data)) {
            this._parsedObject = undefined;
            this._parsedObjectWasRequested = true;
            return this._parsedObject;
        }
        try {
            this._parsedObject = JSON.parse(this._data.toString());
            return this._parsedObject;
        }
        catch (error) {
            this._parsedObject = undefined;
            this._parsedObjectWasRequested = true;
            return this._parsedObject;
        }
    }
}
exports.BufferedContentData = BufferedContentData;
