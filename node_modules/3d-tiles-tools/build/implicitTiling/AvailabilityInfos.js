"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilityInfos = void 0;
const defined_1 = require("../base/defined");
const BufferAvailabilityInfo_1 = require("./BufferAvailabilityInfo");
const ConstantAvailabilityInfo_1 = require("./ConstantAvailabilityInfo");
const ImplicitTilings_1 = require("./ImplicitTilings");
const ImplicitTilingError_1 = require("./ImplicitTilingError");
/**
 * Methods for creating `AvailabilityInfo` instances
 *
 * @internal
 */
class AvailabilityInfos {
    /**
     * Creates a new `AvailabilityInfo` for the given availability
     * information, for tile- or content availability.
     *
     * @param availability - The `Availability` object
     * @param bufferViewDatas - The `BufferView` data chunks
     * @param implicitTiling - The `TileImplicitTiling` object
     * @returns The `AvailabilityInfo` object
     * @throws ImplicitTilingError If the given data is structurally
     * invalid.
     */
    static createTileOrContent(availability, bufferViewDatas, implicitTiling) {
        const length = ImplicitTilings_1.ImplicitTilings.computeNumberOfNodesPerSubtree(implicitTiling);
        return AvailabilityInfos.create(availability, bufferViewDatas, length);
    }
    /**
     * Creates a new `AvailabilityInfo` for the given availability
     * information, for child subtree availability
     *
     * @param availability - The `Availability` object
     * @param bufferViewDatas - The `BufferView` data chunks
     * @param implicitTiling - The `TileImplicitTiling` object
     * @returns The `AvailabilityInfo` object
     * @throws ImplicitTilingError If the given data is structurally
     * invalid.
     */
    static createChildSubtree(availability, bufferViewDatas, implicitTiling) {
        const length = ImplicitTilings_1.ImplicitTilings.computeNumberOfNodesInLevel(implicitTiling, implicitTiling.subtreeLevels);
        return AvailabilityInfos.create(availability, bufferViewDatas, length);
    }
    /**
     * Creates a new `AvailabilityInfo` for the given availability
     * information, for child subtree availability
     *
     * @param availability - The `Availability` object
     * @param bufferViewDatas - The `BufferView` data chunks
     * @param length - The length of the availability info
     * @returns The `AvailabilityInfo` object
     * @throws ImplicitTilingError If the data is structurally invalid
     */
    static create(availability, bufferViewDatas, length) {
        const constant = availability.constant;
        if ((0, defined_1.defined)(constant)) {
            const available = constant === 1;
            return new ConstantAvailabilityInfo_1.ConstantAvailabilityInfo(available, length);
        }
        // The bitstream MUST be defined when constant is undefined
        const bitstream = availability.bitstream;
        if (!(0, defined_1.defined)(bitstream)) {
            throw new ImplicitTilingError_1.ImplicitTilingError("The availability neither defines a constant nor a bitstream");
        }
        const bufferViewData = bufferViewDatas[bitstream];
        return new BufferAvailabilityInfo_1.BufferAvailabilityInfo(bufferViewData, length);
    }
}
exports.AvailabilityInfos = AvailabilityInfos;
