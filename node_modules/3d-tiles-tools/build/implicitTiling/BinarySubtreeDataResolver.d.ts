/// <reference types="node" />
import { ResourceResolver } from "../io/ResourceResolver";
import { Subtree } from "../structure/Subtree";
import { BinarySubtreeData } from "./BinarySubtreeData";
/**
 * A class for resolving the binary data that is associated with
 * a subtree.
 *
 * @internal
 */
export declare class BinarySubtreeDataResolver {
    /**
     * Creates a new `BinarySubtreeData` from the given subtree
     * that was parsed from a subtree JSON file.
     *
     * This will resolve all buffer references that are
     * contained in the subtree JSON.
     *
     * @param subtree - The `Subtree`
     * @param resourceResolver - The `ResourceResolver` that
     * will be used to resolve buffer URIs
     * @returns A promise with the `BinarySubtreeData`
     * @throws An ImplicitTilingError when there was a buffer without
     * a URI (which is not valid when no binary buffer was given),
     * or one of the requested buffers could not be resolved.
     */
    static resolveFromJson(subtree: Subtree, resourceResolver: ResourceResolver): Promise<BinarySubtreeData>;
    /**
     * Creates a new `BinarySubtreeData` from the given binary subtree
     * data that was directly read from a ".subtree" file.
     *
     * This will extract the JSON- and binary buffer part of the
     * subtree data, and resolve all buffer references that are
     * contained in the subtree JSON.
     *
     * @param input - The whole buffer of a binary subtree file
     * @param resourceResolver - The `ResourceResolver` that
     * will be used to resolve buffer URIs
     * @returns A promise with the `BinarySubtreeData`
     * @throws An ImplicitTilingError when the subtree JSON could
     * not be parsed, or there was a buffer without a URI
     * and no binary buffer was given, or one of the requested
     * buffers could not be resolved.
     */
    static resolveFromBuffer(input: Buffer, resourceResolver: ResourceResolver): Promise<BinarySubtreeData>;
    /**
     * A thin wrapper around `BinaryBufferDataResolver.resolve`
     * that obtains the binary buffer structure information from
     * the subtree, resolves it, and returns it as part of
     * the `BinarySubtreeData`
     *
     * @param subtree - The `Subtree`
     * @param binaryBuffer - The binary buffer of the subtree
     * @param resourceResolver - The resource resolver
     * @returns A promise to the resolved binary subtree data
     */
    static resolveInternal(subtree: Subtree, binaryBuffer: Buffer | undefined, resourceResolver: ResourceResolver): Promise<BinarySubtreeData>;
}
//# sourceMappingURL=BinarySubtreeDataResolver.d.ts.map