import { TreeCoordinates } from "../spatial/TreeCoordinates";
import { TileImplicitTiling } from "../structure/TileImplicitTiling";
/**
 * Utility methods related to `TileImplicitTiling` instances.
 *
 * Preliminary!
 *
 * The purpose of these methods is mainly to hide the differences
 * between `QUADTREE` and `OCTREE` subdivision schemes. It is
 * possible to completely hide these differences with the
 * appropriate abstractions. But the resulting structures may
 * involve interfaces that have to be passed all the way to the
 * point where they are used for seemingly trivial computations, and
 * this may look obscure and overengineered at the first glance.
 * However, these methods in this class might eventually be moved
 * into something like an instantiable `ImplicitTilingInfo` class.
 *
 * The methods usually assume that the subdivison scheme is
 * either `QUADTREE` and `OCTREE`, and will throw an
 * `ImplicitTilingError` if this is not the case.
 *
 * @internal
 */
export declare class ImplicitTilings {
    /**
     * Returns a generator for the tile coordinates of a single subtree
     * for the given implicit tiling object.
     *
     * @param implicitTiling - The `TileImplicitTiling` object
     * @returns The generator
     * @throws ImplicitTilingError if the given object does not
     * have a valid `subdivisionScheme`, or the number of subtree
     * levels is not positive
     */
    static createSubtreeCoordinatesIterator(implicitTiling: TileImplicitTiling): IterableIterator<TreeCoordinates>;
    /**
     * Returns the total number of nodes in one subtree for the given
     * implicit tiling object.
     *
     * @param implicitTiling - The `TileImplicitTiling` object
     * @returns The number of nodes
     * @throws ImplicitTilingError if the given object does not
     * have a valid `subdivisionScheme`, or the number of subtree
     * levels is not positive
     */
    static computeNumberOfNodesPerSubtree(implicitTiling: TileImplicitTiling): number;
    /**
     * Returns the number of nodes in the specified level of a
     * tree with the given implicit tiling
     *
     * @param implicitTiling - The `TileImplicitTiling` object
     * @param level - The level
     * @returns The number of nodes
     * @throws ImplicitTilingError if the given object does not
     * have a valid `subdivisionScheme`, or the level is negative.
     */
    static computeNumberOfNodesInLevel(implicitTiling: TileImplicitTiling, level: number): number;
    /**
     * Substitutes the given coordinates into the given template URI.
     *
     * @param subdivisionScheme - The subdivision scheme
     * @param templateUri - The template URI
     * @param coordinates - The tree coordinates
     * @returns The resulting URI
     * @throws ImplicitTilingError if the `subdivisionScheme` is not valid.
     */
    static substituteTemplateUri(subdivisionScheme: string, templateUri: string, coordinates: TreeCoordinates): string;
    /**
     * Creates a string representation for the given coordinates, describing
     * them as coordinates of a tile within an implicit tileset.
     *
     * Details about the returned string are not specified. But it is
     * supposed to be a string that contains the level,x,y,[z] components
     * of the given coordinates for `QuadtreeCoordinates` and
     * `OctreeCoordinates`.
     *
     * @param coordinates - The tree coordinates
     * @returns The result
     * @throws ImplicitTilingError if the coordinates are neither
     * `QuadtreeCoordinates` nor `OctreeCoordinates`.
     */
    static createString(coordinates: TreeCoordinates): string;
    /**
     * Returns the root coordinates for the specified implicit tileset.
     *
     * @param implicitTiling - The `TileImplicitTiling` object
     * @returns The root coordinates
     * @throws ImplicitTilingError if the given object does not
     * have a valid `subdivisionScheme`.
     */
    static createRootCoordinates(implicitTiling: TileImplicitTiling): TreeCoordinates;
    /**
     * Computes the global coordinates from the given local ones.
     *
     * The `rootCoordinates` are the root coordinates of a subtree
     * in the given implicit tiling. The `coordinates` are the local
     * coordinates of a node within this subtree.
     * The result will be the global coordinates for the node within
     * the given implicit tiling.
     *
     * @param implicitTiling - The `TileImplicitTiling` object
     * @param rootCoordinates - The root coordinates
     * @param coordinates - The coordinates
     * @returns The global coordinates
     * @throws ImplicitTilingError if the given object does not
     * have a valid `subdivisionScheme`.
     */
    static globalizeCoordinates(implicitTiling: TileImplicitTiling, rootCoordinates: TreeCoordinates, coordinates: TreeCoordinates): TreeCoordinates;
    /**
     * Compute the global quadtree coordinates for the given coordinates.
     *
     * @param rootCoords - The (global) root coordinates of the subtree
     * @param localCoords - The local coordinates inside the subtree
     * @returns The global coordinates
     */
    private static globalizeQuadtreeCoords;
    /**
     * Compute the global octree coordinates for the given coordinates.
     *
     * @param rootCoords - The (global) root coordinates of the subtree
     * @param localCoords - The local coordinates inside the subtree
     * @returns The global coordinates
     */
    private static globalizeOctreeCoords;
}
//# sourceMappingURL=ImplicitTilings.d.ts.map