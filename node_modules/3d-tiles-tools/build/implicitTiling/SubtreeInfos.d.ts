/// <reference types="node" />
import { ResourceResolver } from "../io/ResourceResolver";
import { SubtreeInfo } from "./SubtreeInfo";
import { BinarySubtreeData } from "./BinarySubtreeData";
import { Subtree } from "../structure/Subtree";
import { TileImplicitTiling } from "../structure/TileImplicitTiling";
/**
 * Methods to create `SubtreeInfo` instances.
 *
 * @internal
 */
export declare class SubtreeInfos {
    /**
     * Creates a new `SubtreeInfo` from the given binary subtree data
     * that was directly read from a ".subtree" file.
     *
     * This method assumes that the given binary data is consistent
     * and valid.
     *
     * @param input - The whole buffer of a binary subtree file
     * @param implicitTiling - The `TileImplicitTiling` that
     * defines the expected structure of the subtree data
     * @param resourceResolver - The `ResourceResolver` that
     * will be used to resolve buffer URIs
     * @returns A promise with the `SubtreeInfo`
     * @throws An ImplicitTilingError when the subtree JSON could
     * not be parsed, or there was a buffer without a URI
     * and no binary buffer was given, or one of the requested
     * buffers could not be resolved.
     */
    static createFromBuffer(input: Buffer, implicitTiling: TileImplicitTiling, resourceResolver: ResourceResolver): Promise<SubtreeInfo>;
    /**
     * Creates a new `SubtreeInfo` from the given subtree
     * that was read from a subtree JSON file.
     *
     * @param subtree - The parsed subtree
     * @param implicitTiling - The `TileImplicitTiling` that
     * defines the expected structure of the subtree data
     * @param resourceResolver - The `ResourceResolver` that
     * will be used to resolve buffer URIs
     * @returns A promise with the `SubtreeInfo`
     * @throws An ImplicitTilingError when there was a buffer without
     * a URI, or one of the requested buffers could not be resolved.
     */
    static createFromJson(subtree: Subtree, implicitTiling: TileImplicitTiling, resourceResolver: ResourceResolver): Promise<SubtreeInfo>;
    /**
     * Creates a new `SubtreeInfo` from the given binary subtree data.
     *
     * This method assumes that the given data is consistent
     * and valid.
     *
     * @param binarySubtreeData - The `BinarySubtreeData`
     * @param implicitTiling - The `TileImplicitTiling` that
     * defines the expected structure of the subtree data
     * @returns The `SubtreeInfo`
     * @throws A ImplicitTilingError when there was a buffer without
     * a URI and no binary buffer was given, or the requested buffer
     * data could not be resolved.
     */
    static create(binarySubtreeData: BinarySubtreeData, implicitTiling: TileImplicitTiling): SubtreeInfo;
}
//# sourceMappingURL=SubtreeInfos.d.ts.map