import { ValidationContext } from "./ValidationContext";
/**
 * A class for validations related to numbers. Specifically,
 * for checks whether numbers are in the range that is
 * determined by a (metadata) component type.
 *
 * @internal
 */
export declare class NumberValidator {
    /**
     * Validates that each element of the given array in is in the range
     * that is determined by the given component type.
     *
     * This assumes that the given `componentType` has already been
     * determined to be a valid one, i.e. is contained in the set of
     * `MetadataComponentTypes#allComponentTypes`.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param values - The values
     * @param componentType - The component type
     * @param context - The `ValidationContext`
     * @returns Whether the value was in the required range
     */
    static validateRanges(path: string, values: number[] | bigint[], componentType: string, context: ValidationContext): boolean;
    /**
     * Validates that the given value is in the range that is determined
     * by the given component type.
     *
     * This assumes that the given `componentType` has already been
     * determined to be a valid one, i.e. is contained in the set of
     * `MetadataComponentTypes#allComponentTypes`.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param name - The name of the value
     * @param value - The value
     * @param componentType - The component type
     * @param context - The `ValidationContext`
     * @returns Whether the value was in the required range
     */
    static validateRange(path: string, name: string, value: number | bigint, componentType: string, context: ValidationContext): boolean;
    private static maximumValue;
    private static minimumValue;
}
//# sourceMappingURL=NumberValidator.d.ts.map