import { BinarySubtreeData } from "3d-tiles-tools";
import { ValidationContext } from "./ValidationContext";
import { AvailabilityInfo } from "3d-tiles-tools";
import { TileImplicitTiling } from "3d-tiles-tools";
/**
 * A class for validation of subtree information.
 *
 * The methods in this class assume that the basic structure
 * of the given objects has already been validated, using
 * the `SubtreeValidator` and `SubtreeConsistencyValidator`.
 *
 * They will attempt to create instances of the "high level"
 * convenience classes from the `implicitTiling` package,
 * and perform consistency checks with these instances.
 *
 * @internal
 */
export declare class SubtreeInfoValidator {
    static validateSubtreeInfo(path: string, binarySubtreeData: BinarySubtreeData, implicitTiling: TileImplicitTiling, context: ValidationContext): Promise<boolean>;
    /**
     * Validates that the `availableCount` - if it is defined -
     * properly reflects the actual number of available elements
     * in the given availability info.
     *
     * If this is the case, then `true` is returned.
     *
     * If this is not the case, a `SUBTREE_AVAILABILITY_INCONSISTENT`
     * issue will be added to the given context, and `false` is returned.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param name - The name of the availability object
     * @param availableCount -
     * @param availabilityInfo - The `AvailabilityInfo`
     * @param context - The `ValidationContext`
     * @returns Whether the availability was consistent
     */
    private static validateAvailableCount;
    /**
     * Validate that the given tile availability is consistent,
     * meaning that for each tile that is available, the parent
     * tile is also available.
     *
     * If this is the case, then `true` is returned.
     *
     * If this is not the case, a `SUBTREE_AVAILABILITY_INCONSISTENT`
     * issue will be added to the given context, and `false` is returned.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param tileAvailabilityInfo - The `AvailabilityInfo`
     * @param implicitTiling - The `TileImplicitTiling` object
     * @param context - The `ValidationContext`
     * @returns Whether the availability was consistent
     */
    static validateTileAvailabilityConsistency(path: string, tileAvailabilityInfo: AvailabilityInfo, implicitTiling: TileImplicitTiling, context: ValidationContext): boolean;
    /**
     * Validate that the given tile availability matches the given content
     * availability, meaning that for each content that is available, the
     * corresponding tile is also available.
     *
     * If this is the case, then `true` is returned.
     *
     * If this is not the case, a `SUBTREE_AVAILABILITY_INCONSISTENT`
     * issue will be added to the given context, and `false` is returned.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param tileAvailabilityInfo - The `AvailabilityInfo` for tiles
     * @param contentAvailabilityInfo - The `AvailabilityInfo` for content
     * @param contentAvailabilityIndex - The index of the content
     * @param implicitTiling - The `TileImplicitTiling` object
     * @param context - The `ValidationContext`
     * @returns Whether the availability was consistent
     */
    static validateTileAvailabilityPresence(path: string, tileAvailabilityInfo: AvailabilityInfo, contentAvailabilityInfo: AvailabilityInfo, contentAvailabilityIndex: number, implicitTiling: TileImplicitTiling, context: ValidationContext): boolean;
}
//# sourceMappingURL=SubtreeInfoValidator.d.ts.map