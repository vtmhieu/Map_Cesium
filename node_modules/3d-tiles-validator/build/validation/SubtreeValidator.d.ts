/// <reference types="node" />
import { ResourceResolver } from "3d-tiles-tools";
import { Validator } from "./Validator";
import { ValidationContext } from "./ValidationContext";
import { ValidationState } from "./ValidationState";
import { TileImplicitTiling } from "3d-tiles-tools";
/**
 * A class for validations related to `subtree` objects that have
 * been read from subtree JSON files, or the JSON part of a
 * binary 'subtree' file.
 *
 * This class is only performing the high-level validation that
 * is related to the binary data and JSON structure. The
 * detailed consistency validations are done by a
 * `SubtreeConsistencyValidator`.
 *
 * @internal
 */
export declare class SubtreeValidator implements Validator<Buffer> {
    /**
     * The `ValidationState` that carries information about
     * the metadata schema
     */
    private readonly _validationState;
    /**
     * The `TileImplicitTiling` object that carries information
     * about the expected structure of the subtree
     */
    private readonly _implicitTiling;
    /**
     * The `ResourceResolver` that will be used to resolve
     * buffer URIs
     */
    private readonly _resourceResolver;
    /**
     * Creates a new instance.
     *
     * @param validationState - The `ValidationState`
     * @param implicitTiling - The `TileImplicitTiling` that
     * defines the expected structure of the subtree
     * @param resourceResolver - The `ResourceResolver` that
     * will be used to resolve buffer URIs.
     */
    constructor(validationState: ValidationState, implicitTiling: TileImplicitTiling | undefined, resourceResolver: ResourceResolver);
    /**
     * Implementation of the `Validator` interface that performs the
     * validation of the given buffer, which is supposed to
     * contain subtree data, either in binary form or as JSON.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param input - The subtree data
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether the object was valid or not.
     */
    validateObject(path: string, input: Buffer, context: ValidationContext): Promise<boolean>;
    /**
     * Performs the validation of the given buffer, which contains the
     * data from a binary subtree file
     *
     * @param path - The path for `ValidationIssue` instances
     * @param input - The contents of a binary subtree file
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether the object was valid or not.
     */
    private validateSubtreeBinaryData;
    /**
     * Performs the validation of the subtree JSON data in the given buffer
     *
     * @param path - The path for `ValidationIssue` instances
     * @param input - The buffer that contains the subtree JSON data
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether the object was valid or not.
     */
    private validateSubtreeJsonData;
    /**
     * Performs the validation of the binary subtree data
     *
     * @param path - The path for `ValidationIssue` instances
     * @param binarySubtreeData - The `BinarySubtreeData` object
     * @param hasBinaryBuffer - Whether the subtree data has an (internal)
     * binary buffer, meaning that the first `Buffer` object may omit
     * the URI.
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether the object was valid or not.
     */
    private validateSubtree;
    /**
     * Performs the validation of the given `Subtree` object, on
     * the level of JSON validity.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param subtree - The `Subtree` object
     * @param hasBinaryBuffer - Whether the subtree has an associated
     * binary buffer
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     */
    private validateSubtreeObject;
    /**
     * Performs the validation to ensure that the given object is a
     * valid `subtree` object.
     *
     * This method will perform the basic validation of the JSON part,
     * excluding the metadata.
     * The consistency and binary data will be validated separately.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param subtree - The `Subtree` object
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    private validateSubtreeBasic;
    /**
     * Performs the validation to ensure that the given object is a
     * valid `availability` object.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param name - The name of the object
     * @param availability - The `Availability` object
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    private static validateAvailability;
    /**
     * Validates the metadata that may be associated with the given subtree.
     *
     * This checks whether there are `propertyTables`, and whether they
     * are valid according to the `validationState.validatedSchema`.
     *
     * It also checks the `tileMetadata`, `contentMetadata`, and
     * `subtreeMetadata`, to see whether it complies to the schema
     * definition and the property tables.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param subtree - The `Subtree` object
     * @param context - The `ValidationContext`
     * @returns Whether the metadata was valid
     */
    private validateMetadata;
    private validateBinaryPropertyTables;
}
//# sourceMappingURL=SubtreeValidator.d.ts.map