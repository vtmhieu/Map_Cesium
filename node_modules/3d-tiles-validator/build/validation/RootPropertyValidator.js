"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootPropertyValidator = void 0;
const _3d_tiles_tools_1 = require("3d-tiles-tools");
const BasicValidator_1 = require("./BasicValidator");
const JsonValidationIssues_1 = require("../issues/JsonValidationIssues");
/**
 * A class for validations related to `rootProperty` objects.
 * This is the "base class" of the schema definitions that
 * nearly all schemas of the 3D Tiles specification refer to,
 * and which defines the `extensions` and `extras` properties.
 *
 * @internal
 */
class RootPropertyValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `rootProperty` object.
     *
     * This will add all extension names that are found to the
     * given validation context.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param name - The name of the object
     * @param rootProperty - The object to validate
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    static validateRootProperty(path, name, rootProperty, context) {
        // Make sure that the given value is an object
        if (!BasicValidator_1.BasicValidator.validateObject(path, name, rootProperty, context)) {
            return false;
        }
        let result = true;
        // Validate the extensions
        const extensions = rootProperty.extensions;
        const extensionsPath = path + "/extensions";
        if ((0, _3d_tiles_tools_1.defined)(extensions)) {
            // The extensions MUST be an object
            if (!BasicValidator_1.BasicValidator.validateObject(extensionsPath, "extensions", extensions, context)) {
                result = false;
            }
            else {
                // Each value of the extensions MUST be an object
                const extensionNames = Object.keys(extensions);
                for (const extensionName of extensionNames) {
                    const extension = extensions[extensionName];
                    const extensionPath = extensionsPath + "/" + extensionName;
                    if (!BasicValidator_1.BasicValidator.validateObject(extensionPath, extensionName, extension, context)) {
                        result = false;
                    }
                    else {
                        context.addExtensionFound(extensionName);
                    }
                }
            }
        }
        // Validate the extras
        const extras = rootProperty.extras;
        const extrasPath = path + "/extras";
        if ((0, _3d_tiles_tools_1.defined)(extras)) {
            // The extras may have any type. But when they are
            // not an object, a warning will be generated.
            if (typeof extras !== "object") {
                const issue = JsonValidationIssues_1.JsonValidationIssues.TYPE_UNEXPECTED(extrasPath, "extras", "object", typeof extras);
                context.addIssue(issue);
            }
        }
        return result;
    }
}
exports.RootPropertyValidator = RootPropertyValidator;
