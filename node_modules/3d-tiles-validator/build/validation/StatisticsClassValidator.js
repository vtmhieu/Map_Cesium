"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatisticsClassValidator = void 0;
const _3d_tiles_tools_1 = require("3d-tiles-tools");
const BasicValidator_1 = require("./BasicValidator");
const RootPropertyValidator_1 = require("./RootPropertyValidator");
const ExtendedObjectsValidators_1 = require("./ExtendedObjectsValidators");
const StructureValidationIssues_1 = require("../issues/StructureValidationIssues");
const _3d_tiles_tools_2 = require("3d-tiles-tools");
/**
 * A class for validations related to `StatisticsClass` objects.
 *
 * @internal
 */
class StatisticsClassValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `statisticsClass` object.
     *
     * @param statisticsClass - The object to validate
     * @param className - The name of the class, used as the
     * key in the `statistics.classes` dictionary, as well as the
     * key in the `schema.classes` dictionary.
     * @param schema - The `Schema` object. This is either the `tileset.schema`,
     * or the `Schema` object that was read from the `schemaUri`.
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    static validateStatisticsClass(statisticsClass, className, schema, context) {
        const classPath = "/statistics/classes/" + className;
        // Make sure that the given value is an object
        if (!BasicValidator_1.BasicValidator.validateObject(classPath, className, statisticsClass, context)) {
            return false;
        }
        let result = true;
        // Validate the object as a RootProperty
        if (!RootPropertyValidator_1.RootPropertyValidator.validateRootProperty(classPath, className, statisticsClass, context)) {
            result = false;
        }
        // Perform the validation of the object in view of the
        // extensions that it may contain
        if (!ExtendedObjectsValidators_1.ExtendedObjectsValidators.validateExtendedObject(classPath, schema, context)) {
            result = false;
        }
        // If there was an extension validator that overrides the
        // default validation, then skip the remaining validation.
        if (ExtendedObjectsValidators_1.ExtendedObjectsValidators.hasOverride(schema)) {
            return result;
        }
        // Each class that appears in the statistics MUST be
        // one of the classes defined in the schema
        const metadataClasses = (0, _3d_tiles_tools_1.defined)(schema.classes) ? schema.classes : {};
        const metadataClass = metadataClasses[className];
        if (!(0, _3d_tiles_tools_1.defined)(metadataClass)) {
            const message = `Statistics contain a class name ${className}, ` +
                `but the schema does not define this class`;
            const issue = StructureValidationIssues_1.StructureValidationIssues.IDENTIFIER_NOT_FOUND(classPath, message);
            context.addIssue(issue);
            result = false;
        }
        else {
            // Each property name of the statistics class MUST be a
            // property name of the schema class
            const metadataClassPropertyNames = Object.keys(metadataClass.properties);
            // The statistics class MUST have at least 1 property
            const statisticsClassProperties = (0, _3d_tiles_tools_2.defaultValue)(statisticsClass.properties, {});
            if (!BasicValidator_1.BasicValidator.validateNumberOfProperties(classPath, "properties", statisticsClassProperties, 1, undefined, context)) {
                result = false;
            }
            else {
                for (const statisticsClassPropetyName of Object.keys(statisticsClassProperties)) {
                    if (!metadataClassPropertyNames.includes(statisticsClassPropetyName)) {
                        const message = `Statistics class '${className}' contains a property name ` +
                            `'${statisticsClassPropetyName}', but the schema class does ` +
                            `not define this property`;
                        const issue = StructureValidationIssues_1.StructureValidationIssues.IDENTIFIER_NOT_FOUND(classPath, message);
                        context.addIssue(issue);
                        result = false;
                    }
                    else {
                        // TODO Validate the constraints for the statistics.class.property.
                        // This COULD include checks for (min>max). But first, it should
                        // check the types (e.g. that 'min' is only used for numeric types)
                    }
                }
            }
        }
        return result;
    }
}
exports.StatisticsClassValidator = StatisticsClassValidator;
