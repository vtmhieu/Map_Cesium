/// <reference types="node" />
import { Validator } from "./Validator";
import { TilesetValidator } from "./TilesetValidator";
import { ValidationResult } from "./ValidationResult";
import { SubtreeValidator } from "./SubtreeValidator";
import { ValidationState } from "./ValidationState";
import { ValidationOptions } from "./ValidationOptions";
import { SchemaValidator } from "./metadata/SchemaValidator";
import { TileImplicitTiling } from "3d-tiles-tools";
/**
 * Utility methods related to `Validator` instances.
 *
 * @beta
 */
export declare class Validators {
    /**
     * Whether the knows extension validators have already been registered
     * by calling `registerExtensionValidators`.
     *
     * Note: This could be solved with a static initializer block, but the
     * unclear initialization order of the classes would make this brittle
     */
    private static _registeredExtensionValidators;
    /**
     * Creates a `TilesetValidator` with an unspecified default configuration.
     *
     * @returns The `TilesetValidator`
     * @internal
     */
    static createDefaultTilesetValidator(): TilesetValidator;
    /**
     * Performs a default validation of the given tileset file, and
     * returns a promise to the `ValidationResult`.
     *
     * The given file may be a `tileset.json` file, or a tileset
     * package file, as incdicated by a `.3tz` or `.3dtiles` file
     * extensions.
     *
     * @param filePath - The file path
     * @param validationOptions - The `ValidationOptions`. When this
     * is not given (or `undefined`), then default validation options
     * will be used. See {@link ValidationOptions}.
     * @returns A promise to a `ValidationResult` that is fulfilled when
     * the validation finished.
     * @beta
     */
    static validateTilesetFile(filePath: string, validationOptions?: ValidationOptions): Promise<ValidationResult>;
    /**
     * Performs a default validation of the given `tileset.json` file, and
     * returns a promise to the `ValidationResult`.
     *
     * @param filePath - The file path
     * @param validationOptions - The `ValidationOptions`. When this
     * is not given (or `undefined`), then default validation options
     * will be used. See {@link ValidationOptions}.
     * @returns A promise to a `ValidationResult` that is fulfilled when
     * the validation finished.
     * @beta
     */
    private static validateTilesetFileInternal;
    /**
     * Performs a default validation of the given tileset package file, and
     * returns a promise to the `ValidationResult`.
     *
     * The given path may be a path of a `.3tz` or a `.3dtiles` file (or
     * a directory that contains a 'tileset.json' file)
     *
     * @param filePath - The file path
     * @param validationOptions - The `ValidationOptions`. When this
     * is not given (or `undefined`), then default validation options
     * will be used. See {@link ValidationOptions}.
     * @returns A promise to a `ValidationResult` that is fulfilled when
     * the validation finished.
     * @beta
     */
    private static validateTilesetPackageInternal;
    /**
     * Creates a `SchemaValidator` with an unspecified default configuration.
     *
     * @returns The `SchemaValidator`
     * @internal
     */
    static createDefaultSchemaValidator(): SchemaValidator;
    /**
     * Performs a default validation of the given schema JSON file, and
     * returns a promise to the `ValidationResult`.
     *
     * @param filePath - The file path
     * @returns A promise to a `ValidationResult` that is fulfilled when
     * the validation finished.
     * @internal
     */
    static validateSchemaFile(filePath: string): Promise<ValidationResult>;
    /**
     * Creates a `SubtreeValidator` with an unspecified default configuration.
     *
     * @returns The `SubtreeValidator`
     * @internal
     */
    static createDefaultSubtreeValidator(uri: string, validationState: ValidationState, implicitTiling: TileImplicitTiling | undefined): SubtreeValidator;
    /**
     * Performs a default validation of the given subtree JSON file, and
     * returns a promise to the `ValidationResult`.
     *
     * @param filePath - The file path
     * @returns A promise to a `ValidationResult` that is fulfilled when
     * the validation finished.
     * @internal
     */
    static validateSubtreeFile(filePath: string, validationState: ValidationState, implicitTiling: TileImplicitTiling | undefined): Promise<ValidationResult>;
    /**
     * Creates a validator for `Buffer` objects that parses an
     * object of type `T` from the (JSON) string representation
     * of the buffer contents, and applies the given delegate
     * to the result.
     *
     * If the object cannot be parsed, a `JSON_PARSE_ERROR`
     * will be added to the given context.
     *
     * @param delegate - The delegate
     * @returns The new validator
     * @internal
     */
    static parseFromBuffer<T>(delegate: Validator<T>): Validator<Buffer>;
    /**
     * Creates a `Validator` that only adds a `CONTENT_VALIDATION_WARNING`
     * with the given message to the given context when it is called.
     *
     * This is used for "dummy" validators that handle content data types
     * that are already anticipated (like VCTR or GEOM), but not validated
     * explicitly.
     *
     * @param message - The message for the warning
     * @returns The new validator
     * @internal
     */
    static createContentValidationWarning(message: string): Validator<Buffer>;
    /**
     * Creates an empty validator that does nothing.
     *
     * This is used for "dummy" validators for content types that
     * are ignored.
     *
     * @returns The new validator
     * @internal
     */
    static createEmptyValidator<T>(): Validator<T>;
    /**
     * Register the validators for known extensions
     */
    private static registerExtensionValidators;
}
//# sourceMappingURL=Validators.d.ts.map