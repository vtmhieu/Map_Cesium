import { ValidationContext } from "./ValidationContext";
import { ValidationState } from "./ValidationState";
import { Tile } from "3d-tiles-tools";
/**
 * A class for validations related to `tile` objects.
 *
 * The main function of this class, `validateTile`, will perform the
 * basic structural validation of the tile object.
 *
 * The function will **NOT** traverse through the children!
 * The traversal is done separately, and supposed to call
 * the `validateTile` function for each encountered tile.
 *
 * The function will **NOT** validate the tile content data.
 * This is done with the `TileContentValidator`, after it
 * has been determined that the tile is structurally valid.
 *
 * @internal
 */
export declare class TileValidator {
    /**
     * Validates the given tile.
     *
     * @param tilePath - The path for the `ValidationIssue`
     * @param tile - The tile
     * @param validationState - The `ValidationState`
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    static validateTile(tilePath: string, tile: Tile, validationState: ValidationState, context: ValidationContext): Promise<boolean>;
    /**
     * Validate the given tile, which is already determined to be
     * a tile that is **NOT** the root of an implicit tileset
     * (i.e. it does **NOT** define `implicitTiling`).
     *
     * @param tilePath - The path for the `ValidationIssue`
     * @param tile - The tile
     * @param validationState - The `ValidationState` object
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    private static validateSimpleTile;
    /**
     * Certain properties may not be defined in an implicit tileset root:
     *
     * - tile.children
     * - tile.metadata
     * - tile.content.boundingVolume
     *
     * This method checks whether the property is indeed undefined,
     * and adds a `TILE_IMPLICIT_ROOT_INVALID` issue to the given
     * context if it was defined.
     *
     * @param tilePath - The path for the `ValidationIssue`
     * @param name - The name of the property
     * @param value - The value of the property
     * @param context - The `ValidationContext`
     * @returns Whether the values was not defined
     */
    private static validateDisallowedInImplicitTilesetRoot;
    /**
     * Validate the given tile, given that it is the root of
     * an implicit tileset, as indicated by the presence of
     * the `implicitTiling` property.
     *
     * @param tilePath - The path for the `ValidationIssue`
     * @param tile - The tile
     * @param implicitTiling - The `TileImplicitTiling` object
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    private static validateImplicitTilesetRoot;
}
//# sourceMappingURL=TileValidator.d.ts.map