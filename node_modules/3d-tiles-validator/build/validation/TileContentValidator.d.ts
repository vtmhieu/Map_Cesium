import { ValidationContext } from "./ValidationContext";
import { Tile } from "3d-tiles-tools";
import { Content } from "3d-tiles-tools";
/**
 * A class for validating a `Tile` and its associated `Content`.
 *
 * @internal
 */
export declare class TileContentValidator {
    /**
     * Validates the given tile content.
     *
     * This assumes that the given content was already determined to
     * be _structurally_ valid on the JSON level, using the
     * `ContentValidator`.
     *
     * @param contentPath - The path for `ValidationIssue` instances
     * @param content - The `Content`
     * @param tile - The tile that the content belongs to
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     */
    static validateTileContent(contentPath: string, content: Content, tile: Tile, context: ValidationContext): Promise<boolean>;
    /**
     * Validate that the content bounding volume (if present) is completely
     * contained in the tile bounding volume.
     *
     * @param tile - The containing tile
     * @param contentPath - The path for the `ValidationIssue` instances
     * @param content - The content
     * @param context - The `ValidationContext`
     * @returns Whether the bounding volumes are consistent
     */
    private static validateContentBoundingVolumeConsistency;
}
//# sourceMappingURL=TileContentValidator.d.ts.map