"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationContext = void 0;
const path_1 = __importDefault(require("path"));
const _3d_tiles_tools_1 = require("3d-tiles-tools");
const ValidationOptions_1 = require("./ValidationOptions");
const ValidationResult_1 = require("./ValidationResult");
/**
 * A class describing the context in which a validation takes place.
 *
 * This class is used to gather the `ValidationIssue` objects
 * that are created during the validation, and add them to a
 * `ValidationResult`.
 *
 * It also provides a `ResourceResolver` to read resources from URIs,
 * in the respective context. For example: When an external tileset
 * is encountered, a new context is derived from the given one,
 * which resolved resources against the base directory of the
 * external tileset.
 *
 * The different configuration settings that affect the behavior
 * of the validator (for example, whether external resources should
 * be validated) are stored in a `ValidationOptions` object.
 *
 * @internal
 */
class ValidationContext {
    constructor(baseUri, resourceResolver, options) {
        this._options = (0, _3d_tiles_tools_1.defaultValue)(options, new ValidationOptions_1.ValidationOptions());
        this._baseUri = baseUri;
        this._result = ValidationResult_1.ValidationResult.create();
        this._resourceResolver = resourceResolver;
        this._extensionsFound = new Set();
        this._activeTilesetUris = new Set();
    }
    /**
     * Derives a new context from this one.
     *
     * It uses the same `ValidationOptions` as this one. The internal
     * `ResourceResolver` is derived by resolving the given path
     * against the original `ResourceResolver`, yielding one that
     * resolves resources against the resulting path.
     *
     * @param uri - The (usually relative) URI
     * @returns The new instance
     */
    deriveFromUri(uri) {
        const derivedResourceResolver = this._resourceResolver.derive(uri);
        const derivedBaseUri = path_1.default.join(this._baseUri, decodeURIComponent(uri));
        const derived = new ValidationContext(derivedBaseUri, derivedResourceResolver, this._options);
        derived._extensionsFound = this._extensionsFound;
        derived._activeTilesetUris = this._activeTilesetUris;
        return derived;
    }
    /**
     * Derives a new context from this one.
     *
     * It uses the same `ValidationOptions` as this one, with
     * a base URI that is derived by resolving the given URI
     * against the current base URI, and uses the given
     * `ResourceResolver`
     *
     * @param uri - The (usually relative) URI
     * @param resourceResolver - The resource resolver
     * @returns The new instance
     */
    deriveFromResourceResolver(uri, resourceResolver) {
        const derivedBaseUri = path_1.default.join(this._baseUri, decodeURIComponent(uri));
        const derived = new ValidationContext(derivedBaseUri, resourceResolver, this._options);
        derived._extensionsFound = this._extensionsFound;
        derived._activeTilesetUris = this._activeTilesetUris;
        return derived;
    }
    addIssue(issue) {
        this._result.add(issue);
    }
    addExtensionFound(extension) {
        this._extensionsFound.add(extension);
    }
    getExtensionsFound() {
        return new Set(this._extensionsFound);
    }
    getResult() {
        return this._result;
    }
    getResourceResolver() {
        return this._resourceResolver;
    }
    resolveUri(uri) {
        let resolved = path_1.default.resolve(this._baseUri, decodeURIComponent(uri));
        resolved = resolved.replace(/\\/g, "/");
        return resolved;
    }
    addActiveTilesetUri(uri) {
        this._activeTilesetUris.add(uri);
    }
    removeActiveTilesetUri(uri) {
        this._activeTilesetUris.delete(uri);
    }
    isActiveTilesetUri(uri) {
        return this._activeTilesetUris.has(uri);
    }
    getOptions() {
        return this._options;
    }
}
exports.ValidationContext = ValidationContext;
