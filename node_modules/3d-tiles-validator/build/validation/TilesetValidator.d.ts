import { Validator } from "./Validator";
import { ValidationContext } from "./ValidationContext";
import { Tileset } from "3d-tiles-tools";
import { Schema } from "3d-tiles-tools";
/**
 * A class that can validate a 3D Tiles tileset.
 *
 * @internal
 */
export declare class TilesetValidator implements Validator<Tileset> {
    /**
     * Performs the validation of the tileset that is parsed from the
     * given input string.
     *
     * @param input - The string that was read from a `tileset.json` file
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     */
    validateJsonString(input: string, context: ValidationContext): Promise<void>;
    /**
     * Implementation of the `Validator` interface that just passes the
     * input to `validateTileset`.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param input - The `Tileset` object
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether the object was valid or not.
     */
    validateObject(path: string, input: Tileset, context: ValidationContext): Promise<boolean>;
    /**
     * Performs the validation of the given `Tileset` object that was parsed
     * from a `tileset.json` input.
     *
     * Issues that are encountered during the validation will be added
     * as `ValidationIssue` instances to the given `ValidationContext`.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param tileset - The `Tileset` object
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether the object was valid or not.
     */
    static validateTileset(path: string, tileset: Tileset, context: ValidationContext): Promise<boolean>;
    /**
     * Validate the extension declarations of the given tileset.
     *
     * This is supposed to be called at the end of the validation process
     * of the tileset. It uses the extension names that have been added
     * to the `ValidationContext` via `addExtensionFound`, to make sure
     * that all extensions that are found have also been declared in
     * the 'extensionsUsed' array.
     *
     * It also performs the JSON-schema level validation of the basic
     * structure and consistency of the 'extensionsUsed' and
     * 'extensionsRequired' arrays of the given tileset.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param tileset - The `Tileset`
     * @param context - The `ValidationContext`
     * @returns Whether the declarations have been valid
     */
    private static validateExtensionDeclarations;
    /**
     * Resolves the schema for the given tileset.
     *
     * The result will be an object with the following properties:
     *
     * `hasSchemaDefinition`: This is `true` if there either was a
     * `tileset.schema` or a `tileset.schemaUri`
     *
     * `schema`: This is either the `tileset.schema`, or the
     * schema that was read from the `tileset.schemaUri`. If
     * the latter could not be resolved, `schema` will be
     * `undefined`.
     *
     * @param tileset - The `Tileset` object
     * @param context - The `ValidationContext`
     * @returns A promise that resolves with the result object
     */
    static resolveTilesetSchema(tileset: Tileset, context: ValidationContext): Promise<{
        hasSchemaDefinition: boolean;
        schema?: Schema;
    }>;
    /**
     * Validates the given `tileset.groups`
     *
     * @param groups - The groups
     * @param schema - The schema that was either contained in the
     * `tileset.schema`, or resolved from the `tileset.schemaUri`
     * @param context - The `ValidationContext`
     * @returns Whether the groups are valid
     */
    private static validateTilesetGroups;
}
//# sourceMappingURL=TilesetValidator.d.ts.map