import { ValidationContext } from "./ValidationContext";
/**
 * A class for generic, basic validations. These are mainly checks for
 * definedness of values, their types, and their ranges, that may lead
 * to different `JsonValidationIssues`.
 *
 * @internal
 */
export declare class BasicValidator {
    /**
     * Validate that the given string is a valid identifier string,
     * as defined in the 3D Metadata Specification.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value is an identifier string
     */
    static validateIdentifierString(path: string, name: string, value: string, context: ValidationContext): boolean;
    /**
     * Validate that the specified value has the type `"string"`,
     * if it is present.
     *
     * If the value has the expected type, then `true` is returned.
     *
     * If the value does not have the expeced type, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false`
     * is returned.
     *
     * @param containingPath - The path of the object containing
     * the property, for the `ValidationIssue` message
     * @param containingObject - The object that may contain the
     * property
     * @param name - The name of the property
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the specified value has the expected type
     */
    static validateOptionalString(containingPath: string, containingObject: any, name: string, context: ValidationContext): boolean;
    /**
     * Validate that the given value is defined.
     *
     * If the value is defined, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value is defined
     */
    static validateDefined(path: string, name: string, value: any, context: ValidationContext): boolean;
    /**
     * Validate that the given value is an array.
     *
     * If the value is an array with the expected length, then `true` is
     * returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the value is not an array, then a `TYPE_MISMATCH` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the expected length is given, and the array does not have
     * this length, then an `ARRAY_LENGTH_MISMATCH` validation issue
     * is added to the given context, and `false` is returned.
     *
     * If the expected type is given, and any element of the array does
     * not have the expcected type, then a `TYPE_MISMATCH` validation
     * issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param minLength - The optional minimum length
     * @param maxLength - The optional maximum length
     * @param expectedElementType - The optional expected element type
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value is an array with the expected
     * length
     */
    static validateArray(path: string, name: string, value: any, minLength: number | undefined, maxLength: number | undefined, expectedElementType: string | undefined, context: ValidationContext): boolean;
    /**
     * Validates that the elements in the given array are unique.
     *
     * This assumes that the basic validation of the array has already
     * been peformed. It **ONLY** checks the uniqueness of the elements.
     *
     * If the elements are unique, then `true` is returned.
     *
     * Otherwise, one `ARRAY_ELEMENT_NOT_UNIQUE` issue will be added
     * for each non-unique element, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param array - The array
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the elements have been unique
     */
    static validateArrayElementsUnique(path: string, name: string, array: any, context: ValidationContext): boolean;
    /**
     * Validate that the given value has the type `"object"`.
     *
     * If the value has the expected type, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object does not have the expeced type, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateObject(path: string, name: string, value: any, context: ValidationContext): value is {
        [key: string]: any;
    };
    /**
     * Validate that the given value has the type `"string"`.
     *
     * If the value has the expected type, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object does not have the expeced type, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateString(path: string, name: string, value: any, context: ValidationContext): value is string;
    /**
     * Validate that the given value has the type `"number"`.
     *
     * If the value has the expected type, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object does not have the expeced type, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateNumber(path: string, name: string, value: any, context: ValidationContext): value is number;
    /**
     * Validate that the given value has the type `"boolean"`.
     *
     * If the value has the expected type, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object does not have the expeced type, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateBoolean(path: string, name: string, value: any, context: ValidationContext): value is boolean;
    /**
     * Validate that the given object has the expected type.
     *
     * If the value has the expected type, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object does not have the expeced type, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param expectedType - The expected type
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateType(path: string, name: string, value: any, expectedType: string, context: ValidationContext): boolean;
    /**
     * Validate that the given value is an integer.
     *
     * If the value has the expected type, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object does not have the expeced type, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateInteger(path: string, name: string, value: any, context: ValidationContext): boolean;
    /**
     * Validate that the given value is in the specified range.
     *
     * If the value is in the specified range, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object is not a number, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * If the value is not in the required range, `VALUE_NOT_IN_RANGE`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param min - The minimum value (optional)
     * @param minInclusive - Whether the minimum value is inclusive
     * @param max - The maximum value (optional)
     * @param maxInclusive - Whether the maximum value is inclusive
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value is in the expected range
     */
    static validateNumberRange(path: string, name: string, value: number, min: number | bigint | undefined, minInclusive: boolean, max: number | bigint | undefined, maxInclusive: boolean, context: ValidationContext): boolean;
    /**
     * Validate that the given value is in the specified range.
     *
     * If the value is in the specified range, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object is not an integer, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * If the value is not in the required range, `VALUE_NOT_IN_RANGE`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param min - The minimum value (optional)
     * @param minInclusive - Whether the minimum value is inclusive
     * @param max - The maximum value (optional)
     * @param maxInclusive - Whether the maximum value is inclusive
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value is in the expected range
     */
    static validateIntegerRange(path: string, name: string, value: number, min: number | undefined, minInclusive: boolean, max: number | undefined, maxInclusive: boolean, context: ValidationContext): boolean;
    /**
     * Validate that the given number is in the specified range.
     *
     * This function assumes the given value to be defined and
     * to be a number.
     *
     * If the value is not in the required range, `VALUE_NOT_IN_RANGE`
     * validation issue is added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param min - The minimum value (optional)
     * @param minInclusive - Whether the minimum value is inclusive
     * @param max - The maximum value (optional)
     * @param maxInclusive - Whether the maximum value is inclusive
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value is in the expected range
     */
    static _validateNumberRangeInternal(path: string, name: string, value: number, min: number | bigint | undefined, minInclusive: boolean, max: number | bigint | undefined, maxInclusive: boolean, context: ValidationContext): boolean;
    /**
     * Validate that the given value is a valid enum value.
     *
     * If the value is valid, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object is not contained in the given array of
     * allowed values, then a `VALUE_NOT_IN_LIST` validation issue is
     * added to the given context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param allowedValues - The array of allowed values
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateEnum(path: string, name: string, value: any, allowedValues: any[], context: ValidationContext): boolean;
    /**
     * Validate that the given object has the required number of properties.
     *
     * If the object has the required number, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the value is not an object, then a `TYPE_MISMATCH` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given value does not have the required number of properties,
     * then a `NUMBER_OF_PROPERTIES_MISMATCH` issue is added to the given
     * context, and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param minProperties - The minimum number of properties
     * @param maxProperties - The maximum number of properties
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateNumberOfProperties(path: string, name: string, value: any, minProperties: number | undefined, maxProperties: number | undefined, context: ValidationContext): boolean;
    /**
     * Validate that the given value is a string with the required length.
     *
     * If the value has the expected length, then `true` is returned.
     *
     * If the given value is not defined, a `PROPERTY_MISSING` validation
     * issue is added to the given context, and `false` is returned.
     *
     * If the given object does not have the type `"string"`, a `TYPE_MISMATCH`
     * validation issue is added to the given context, and `false` is returned.
     *
     * If the given object does not have the required length, then a
     * `STRING_LENGTH_MISMATCH` issue will be added to the given context,
     * and `false` is returned.
     *
     * @param path - The path for the `ValidationIssue` message
     * @param name - The name for the `ValidationIssue` message
     * @param value - The value
     * @param minLength - The optional minimum length
     * @param maxLength - The optional maximum length
     * @param context - The `ValidationContext` to add the issue to
     * @returns Whether the given value has the expected type
     */
    static validateStringLength(path: string, name: string, value: any, minLength: number | undefined, maxLength: number | undefined, context: ValidationContext): boolean;
}
//# sourceMappingURL=BasicValidator.d.ts.map