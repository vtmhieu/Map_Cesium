"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationIssue = void 0;
/**
 * A class summarizing the information about an issue that was
 * encountered during the validation process.
 *
 * @beta
 */
class ValidationIssue {
    /**
     * Creates a new instance. See the properties documentation for
     * details about the given parameters.
     *
     * @param type - The type
     * @param path - The path
     * @param message - The message
     * @param severity - The severity
     * @internal
     */
    constructor(type, path, message, severity) {
        this._type = type;
        this._path = path;
        this._message = message;
        this._severity = severity;
        this._causes = [];
    }
    /**
     * Returns the type of this issue.
     *
     * This is a an identifier for the type of the issue,
     * in `UPPER_SNAKE_CASE`, describing what caused the
     * issue.
     *
     * @returns The type
     */
    get type() {
        return this._type;
    }
    /**
     * Returns the path leading to the element that caused the issue.
     *
     * This resembles a "JSON path", but may contain elements
     * that go outside of the actual containing JSON (for example,
     * it may contain the name of a tile content file)
     *
     * @returns The path
     */
    get path() {
        return this._path;
    }
    /**
     * Returns the human-readable message that describes the issue.
     *
     * This contains further details about the issue, often with
     * information that indicates how to resolve the issue.
     *
     * @returns The message
     */
    get message() {
        return this._message;
    }
    /**
     * Returns the severity of this issue
     *
     * @returns The `ValidationIssueSeverity`
     */
    get severity() {
        return this._severity;
    }
    /**
     * Adds the given validation issue as one of the 'causes' of
     * this issue.
     *
     * Clients should not call this function. It is only used
     * to construct validation issues internally.
     *
     * @param cause - The issue to add as a cause
     * @internal
     */
    addCause(cause) {
        this._causes.push(cause);
    }
    /**
     * Returns a read-only view of all issues that eventually
     * caused this issue (this may be an empty array).
     *
     * @returns The causes of this issue
     */
    get causes() {
        return this._causes;
    }
    /**
     * Creates a JSON representation of this issue and all the
     * causes that it contains.
     *
     * @returns The JSON representation of this issue
     * @internal
     */
    toJson() {
        const causesJson = this.causes.length > 0 ? this.causes.map((i) => i.toJson()) : undefined;
        return {
            type: this.type,
            path: this.path,
            message: this.message,
            severity: this.severity,
            causes: causesJson,
        };
    }
    /**
     * Creates a JSON string representation of this result
     *
     * @returns The string representation
     * @internal
     */
    serialize() {
        return JSON.stringify(this.toJson(), undefined, 2);
    }
}
exports.ValidationIssue = ValidationIssue;
