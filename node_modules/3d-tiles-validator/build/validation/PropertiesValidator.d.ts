import { ValidationContext } from "./ValidationContext";
import { Properties } from "3d-tiles-tools";
/**
 * A class for validations related to `tileset.properties` objects. Aplogies
 * for the confusing name...
 *
 * @internal
 */
export declare class PropertiesValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `tileset.properties` object.
     *
     * Note that the `tileset.properties` is actually a dictionary,
     * that maps names to `Properties` objects (which, despite
     * the name, are actually a single property description)
     *
     * @param properties - The object to validate
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    static validateProperties(tilesetProperties: {
        [key: string]: Properties;
    }, context: ValidationContext): boolean;
    /**
     * Performs the validation to ensure that the given object is a
     * valid `Properties` object.
     *
     * Note that the `Properties` type (despite the name) represents only
     * a single property - i.e. one value in the `tileset.properties`
     * dictionary.
     *
     * @param name - The property name
     * @param properties - The object to validate
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    private static validateSingleProperties;
}
//# sourceMappingURL=PropertiesValidator.d.ts.map