import { ValidationContext } from "./ValidationContext";
import { BinaryBufferStructure } from "3d-tiles-tools";
/**
 * A class for validations related to binary buffer structures.
 *
 * This is the information that is stored in a `BinaryBufferStructure`,
 * namely the `buffers` and `bufferViews`, which may be part of a `Subtree`.
 *
 * The validation here is split into two parts:
 *
 * - validateBinaryBufferStructure Performs the JSON-level validation
 *   of the `buffer` and `bufferView` objects
 *
 * - validateBinaryBufferStructureConsistency Performs the consistency
 *   validation of the buffers and buffer views in terms of the
 *   memory layout, and is supposed to be called only after the
 *   JSON-level validation has been performed
 *
 * @internal
 */
export declare class BinaryBufferStructureValidator {
    /**
     * Performs the validation of the given `BinaryBufferStructure`
     *
     * @param path - The path for `ValidationIssue` instances
     * @param binaryBufferStructure - The `BinaryBufferStructure` object
     * @param firstBufferUriIsRequired - If this is `false`, then the
     * first buffer may omit the `uri` property, namely when it refers
     * to a  binary chunk, for example, of a binary `.subtree` file.
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    static validateBinaryBufferStructure(path: string, binaryBufferStructure: BinaryBufferStructure, firstBufferUriIsRequired: boolean, context: ValidationContext): boolean;
    /**
     * Performs the validation to ensure that the given object is a
     * valid `BufferObject` object.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param name - The name of the object
     * @param buffer - The `BufferObject` object
     * @param bufferUriIsRequired - Whether the buffer must have a `uri`
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    private static validateBuffer;
    /**
     * Performs the validation to ensure that the given object is a
     * valid `BufferView` object.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param name - The name of the object
     * @param bufferView - The `BufferView` object
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    private static validateBufferView;
    /**
     * Validate the consistency of the `buffer` and `bufferView` objects
     * in the given binary buffer structure.
     *
     * This assumes that the basic (JSON-level) structural validations
     * have already been performed. It will only validate the consistency
     * of the memory layout of buffer views and buffers.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param binaryBufferStructure - The `BinaryBufferStructure` object
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    static validateBinaryBufferStructureConsistency(path: string, binaryBufferStructure: BinaryBufferStructure, context: ValidationContext): boolean;
}
//# sourceMappingURL=BinaryBufferStructureValidator.d.ts.map