"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetValidator = void 0;
const _3d_tiles_tools_1 = require("3d-tiles-tools");
const BasicValidator_1 = require("./BasicValidator");
const RootPropertyValidator_1 = require("./RootPropertyValidator");
const ExtendedObjectsValidators_1 = require("./ExtendedObjectsValidators");
const SemanticValidationIssues_1 = require("../issues/SemanticValidationIssues");
/**
 * A class for validations related to `asset` objects.
 *
 * @internal
 */
class AssetValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `asset` object.
     *
     * @param asset - The object to validate
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    static validateAsset(asset, context) {
        const path = "/asset";
        // Make sure that the given value is an object
        if (!BasicValidator_1.BasicValidator.validateObject(path, "asset", asset, context)) {
            return false;
        }
        let result = true;
        // Validate the object as a RootProperty
        if (!RootPropertyValidator_1.RootPropertyValidator.validateRootProperty(path, "asset", asset, context)) {
            result = false;
        }
        // Perform the validation of the object in view of the
        // extensions that it may contain
        if (!ExtendedObjectsValidators_1.ExtendedObjectsValidators.validateExtendedObject(path, asset, context)) {
            result = false;
        }
        // If there was an extension validator that overrides the
        // default validation, then skip the remaining validation.
        if (ExtendedObjectsValidators_1.ExtendedObjectsValidators.hasOverride(asset)) {
            return result;
        }
        // Validate the version
        const version = asset.version;
        const versionPath = "/asset/version";
        // The version MUST be defined
        // The version MUST be a string
        if (!BasicValidator_1.BasicValidator.validateString(versionPath, "version", version, context)) {
            result = false;
        }
        else {
            // The version SHOULD be one of the `knownAssetVersions`
            if (!AssetValidator.knownAssetVersions.includes(version)) {
                const message = `The asset version is ${version}, ` +
                    `known versions are ${AssetValidator.knownAssetVersions}`;
                const issue = SemanticValidationIssues_1.SemanticValidationIssues.ASSET_VERSION_UNKNOWN(versionPath, message);
                context.addIssue(issue);
            }
        }
        // Validate the tilesetVersion
        const tilesetVersion = asset.tilesetVersion;
        const tilesetVersionPath = "/asset/tilesetVersion";
        if ((0, _3d_tiles_tools_1.defined)(tilesetVersion)) {
            // The tilesetVersion MUST be a string
            if (!BasicValidator_1.BasicValidator.validateString(tilesetVersionPath, "tilesetVersion", tilesetVersion, context)) {
                result = false;
            }
        }
        return result;
    }
}
exports.AssetValidator = AssetValidator;
/**
 * The set of "known" asset versions. When encountering a version
 * that is not in this list, a warning will be created.
 */
AssetValidator.knownAssetVersions = ["0.0", "1.0", "1.1"];
