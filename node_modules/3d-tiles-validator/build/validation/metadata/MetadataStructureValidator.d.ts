import { ValidationContext } from "./../ValidationContext";
import { Schema } from "3d-tiles-tools";
/**
 * A class for validations related to instance definitions of
 * metadata classes. This refers to `metadataEntity` and
 * `propertyTable` definitions. It offers a method to check
 * whether the respective `class` name is a valid class name,
 * and whether the `properites` match the properties of the
 * respective class.
 *
 * @internal
 */
export declare class MetadataStructureValidator {
    /**
     * Performs the validation to ensure that the given properties have
     * the proper structure according to the given metadata schema.
     *
     * This will check whether
     * - the given `class` name is a valid class name in the schema
     * - each of the `properties` appears as a property name in the class
     * - each property that is marked as `required` in the class also
     *   has a value in the given `properties` dictionary
     *
     * This will **NOT** validate the property values themself. The
     * exact type of the property values will either be `anyValue`
     * objects (in a `metadataEntity`), or `propertyTable.property`
     * values (in a `propertyTable`), and therefore be validated
     * in the `MetadataEntityValidator` or `PropertyTableValidator`.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param name - A name for the object
     * @param className - The `class`
     * @param properties - The `properties`
     * @param schema - The `Schema` object. This is either the `tileset.schema`,
     * or the `Schema` object that was read from the `schemaUri`.
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the given class name and properties have the proper
     * structure according to the given metadata schema.
     */
    static validateMetadataStructure(path: string, name: string, className: string, properties: {
        [key: string]: any;
    } | undefined, schema: Schema, context: ValidationContext): boolean;
}
//# sourceMappingURL=MetadataStructureValidator.d.ts.map