"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyTablePropertyValidator = void 0;
const _3d_tiles_tools_1 = require("3d-tiles-tools");
const BasicValidator_1 = require("./../BasicValidator");
const ClassPropertyValueValidator_1 = require("./ClassPropertyValueValidator");
const _3d_tiles_tools_2 = require("3d-tiles-tools");
const StructureValidationIssues_1 = require("../../issues/StructureValidationIssues");
const MetadataValidationIssues_1 = require("../../issues/MetadataValidationIssues");
/**
 * A class for validations related to `propertyTable.property` objects.
 *
 * @internal
 */
class PropertyTablePropertyValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `propertyTable.property` object.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param propertyName - The name of the property
     * @param propertyTableProperty - The object to validate
     * @param numBufferViews - The number of buffer views that are available
     * @param classProperty - The `ClassProperty` definition from the schema
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    static validatePropertyTableProperty(path, propertyName, propertyTableProperty, numBufferViews, classProperty, context) {
        // Make sure that the given value is an object
        if (!BasicValidator_1.BasicValidator.validateObject(path, propertyName, propertyTableProperty, context)) {
            return false;
        }
        let result = true;
        // The basic structure of the class property was already
        // validated by the `MatadataStructureValidator`
        const isVariableLengthArray = classProperty.array && !(0, _3d_tiles_tools_1.defined)(classProperty.count);
        const isString = classProperty.type === "STRING";
        // Validate the values
        // The values MUST be defined
        // The values MUST be an integer in [0, numBufferViews)
        const values = propertyTableProperty.values;
        const valuesPath = path + "/values";
        if (!BasicValidator_1.BasicValidator.validateIntegerRange(valuesPath, "values", values, 0, true, numBufferViews, false, context)) {
            result = false;
        }
        // Validate the arrayOffsets
        const arrayOffsets = propertyTableProperty.arrayOffsets;
        const arrayOffsetsPath = path + "/arrayOffsets";
        if (isVariableLengthArray) {
            // For variable-length arrays, the arrayOffsets MUST be defined
            if (!(0, _3d_tiles_tools_1.defined)(arrayOffsets)) {
                const message = `The property '${propertyName}' is a variable-length array, ` +
                    `but the property table property does not define 'arrayOffsets'`;
                const issue = StructureValidationIssues_1.StructureValidationIssues.REQUIRED_VALUE_NOT_FOUND(path, message);
                context.addIssue(issue);
                result = false;
            }
            else {
                // The arrayOffsets MUST be an integer in [0, numBufferViews)
                if (!BasicValidator_1.BasicValidator.validateIntegerRange(arrayOffsetsPath, "arrayOffsets", arrayOffsets, 0, true, numBufferViews, false, context)) {
                    result = false;
                }
            }
        }
        // Validate the stringOffsets
        const stringOffsets = propertyTableProperty.stringOffsets;
        const stringOffsetsPath = path + "/stringOffsets";
        if (isString) {
            // For the STRING type, the stringOffsets MUST be defined
            if (!(0, _3d_tiles_tools_1.defined)(stringOffsets)) {
                const message = `The property '${propertyName}' has the type 'STRING', ` +
                    `but the property table property does not define 'stringOffsets'`;
                const issue = StructureValidationIssues_1.StructureValidationIssues.REQUIRED_VALUE_NOT_FOUND(path, message);
                context.addIssue(issue);
                result = false;
            }
            else {
                // The stringOffsets MUST be an integer in [0, numBufferViews)
                if (!BasicValidator_1.BasicValidator.validateIntegerRange(stringOffsetsPath, "stringOffsets", stringOffsets, 0, true, numBufferViews, false, context)) {
                    result = false;
                }
            }
        }
        // TODO The arrayOffsetType and stringOffsetType should
        // probably only be allowed when the type is a dynamic
        // length array or string types
        // Validate the arrayOffsetType
        const arrayOffsetType = propertyTableProperty.arrayOffsetType;
        const arrayOffsetTypePath = path + "/arrayOffsetType";
        if ((0, _3d_tiles_tools_1.defined)(arrayOffsetType)) {
            // The arrayOffsetType MUST be one of the allowed types,
            // namely UINT8, UINT16, UINT32 or UINT64
            if (!BasicValidator_1.BasicValidator.validateEnum(arrayOffsetTypePath, "arrayOffsetType", arrayOffsetType, _3d_tiles_tools_2.MetadataComponentTypes.unsignedComponentTypes, context)) {
                result = false;
            }
        }
        // Validate the stringOffsetType
        const stringOffsetType = propertyTableProperty.stringOffsetType;
        const stringOffsetTypePath = path + "/stringOffsetType";
        if ((0, _3d_tiles_tools_1.defined)(stringOffsetType)) {
            // The stringOffsetType MUST be one of the allowed types,
            // namely UINT8, UINT16, UINT32 or UINT64
            if (!BasicValidator_1.BasicValidator.validateEnum(stringOffsetTypePath, "stringOffsetType", stringOffsetType, _3d_tiles_tools_2.MetadataComponentTypes.unsignedComponentTypes, context)) {
                result = false;
            }
        }
        // Validate the offset
        const offset = propertyTableProperty.offset;
        if ((0, _3d_tiles_tools_1.defined)(offset)) {
            // The 'offset' MUST not be given for variable-length arrays
            if (isVariableLengthArray) {
                const issue = MetadataValidationIssues_1.MetadataValidationIssues.METADATA_PROPERTY_INVALID_FOR_VARIABLE_LENGTH_ARRAY(path, propertyName, "offset");
                context.addIssue(issue);
                result = false;
            }
            else {
                if (!ClassPropertyValueValidator_1.ClassPropertyValueValidator.validateOffsetScale(path, propertyName, classProperty, "offset", offset, context)) {
                    result = false;
                }
            }
        }
        // Validate the scale
        const scale = propertyTableProperty.scale;
        if ((0, _3d_tiles_tools_1.defined)(scale)) {
            // The 'scale' MUST not be given for variable-length arrays
            if (isVariableLengthArray) {
                const issue = MetadataValidationIssues_1.MetadataValidationIssues.METADATA_PROPERTY_INVALID_FOR_VARIABLE_LENGTH_ARRAY(path, propertyName, "scale");
                context.addIssue(issue);
                result = false;
            }
            else {
                if (!ClassPropertyValueValidator_1.ClassPropertyValueValidator.validateOffsetScale(path, propertyName, classProperty, "scale", scale, context)) {
                    result = false;
                }
            }
        }
        // Validate the max
        const max = propertyTableProperty.max;
        if ((0, _3d_tiles_tools_1.defined)(max)) {
            // The 'max' MUST not be given for variable-length arrays
            if (isVariableLengthArray) {
                const issue = MetadataValidationIssues_1.MetadataValidationIssues.METADATA_PROPERTY_INVALID_FOR_VARIABLE_LENGTH_ARRAY(path, propertyName, "max");
                context.addIssue(issue);
                result = false;
            }
            else {
                if (!ClassPropertyValueValidator_1.ClassPropertyValueValidator.validateMaxMin(path, propertyName, classProperty, "max", max, context)) {
                    result = false;
                }
            }
        }
        // Validate the min
        const min = propertyTableProperty.min;
        if ((0, _3d_tiles_tools_1.defined)(min)) {
            // The 'min' MUST not be given for variable-length arrays
            if (isVariableLengthArray) {
                const issue = MetadataValidationIssues_1.MetadataValidationIssues.METADATA_PROPERTY_INVALID_FOR_VARIABLE_LENGTH_ARRAY(path, propertyName, "min");
                context.addIssue(issue);
                result = false;
            }
            else {
                if (!ClassPropertyValueValidator_1.ClassPropertyValueValidator.validateMaxMin(path, propertyName, classProperty, "min", min, context)) {
                    result = false;
                }
            }
        }
        return result;
    }
}
exports.PropertyTablePropertyValidator = PropertyTablePropertyValidator;
