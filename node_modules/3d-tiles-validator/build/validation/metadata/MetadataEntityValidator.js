"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataEntityValidator = void 0;
const _3d_tiles_tools_1 = require("3d-tiles-tools");
const _3d_tiles_tools_2 = require("3d-tiles-tools");
const BasicValidator_1 = require("./../BasicValidator");
const RootPropertyValidator_1 = require("./../RootPropertyValidator");
const ExtendedObjectsValidators_1 = require("./../ExtendedObjectsValidators");
const MetadataStructureValidator_1 = require("./MetadataStructureValidator");
const MetadataValueValidator_1 = require("./MetadataValueValidator");
/**
 * A class for validations related to `metadataEntity` objects.
 *
 * @internal
 */
class MetadataEntityValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `metadataEntity` object.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param name - A name for the object
     * @param metadataEntity - The object to validate
     * @param schema - The `Schema` object. This is either the `tileset.schema`,
     * or the `Schema` object that was read from the `schemaUri`.
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the given object is a valid metadataEntity object
     */
    static validateMetadataEntity(path, name, metadataEntity, schema, context) {
        // Make sure that the given value is an object
        if (!BasicValidator_1.BasicValidator.validateObject(path, name, metadataEntity, context)) {
            return false;
        }
        let result = true;
        // Validate the object as a RootProperty
        if (!RootPropertyValidator_1.RootPropertyValidator.validateRootProperty(path, name, metadataEntity, context)) {
            result = false;
        }
        // Perform the validation of the object in view of the
        // extensions that it may contain
        if (!ExtendedObjectsValidators_1.ExtendedObjectsValidators.validateExtendedObject(path, metadataEntity, context)) {
            result = false;
        }
        // If there was an extension validator that overrides the
        // default validation, then skip the remaining validation.
        if (ExtendedObjectsValidators_1.ExtendedObjectsValidators.hasOverride(metadataEntity)) {
            return result;
        }
        // Validate that the class and properties are structurally
        // valid and comply to the metadata schema
        const className = metadataEntity.class;
        const entityProperties = metadataEntity.properties;
        if (!MetadataStructureValidator_1.MetadataStructureValidator.validateMetadataStructure(path, name, className, entityProperties, schema, context)) {
            result = false;
            // Bail out early if the structure is not valid!
            return result;
        }
        // Here, the basic structure of the class and properties
        // have been determined to be valid. Continue to validate
        // the values of the properties.
        const metadataClasses = (0, _3d_tiles_tools_2.defaultValue)(schema.classes, {});
        const metadataClass = metadataClasses[className];
        const classProperties = (0, _3d_tiles_tools_2.defaultValue)(metadataClass.properties, {});
        const validProperties = (0, _3d_tiles_tools_2.defaultValue)(entityProperties, {});
        const validPropertyNames = Object.keys(validProperties);
        // Validate each property
        for (const propertyName of validPropertyNames) {
            const propertyPath = path + "/" + propertyName;
            const classProperty = classProperties[propertyName];
            // Note: The check whether 'required' properties are
            // present and have values was already done by the
            // MetadataStructureValidator
            const propertyValue = validProperties[propertyName];
            if ((0, _3d_tiles_tools_1.defined)(propertyValue)) {
                // The property value MUST match the structure
                // of the property definition
                if (!MetadataValueValidator_1.MetadataValueValidator.validateValueStructure(propertyPath, propertyName, classProperty, propertyName, propertyValue, schema, context)) {
                    result = false;
                }
            }
        }
        return result;
    }
}
exports.MetadataEntityValidator = MetadataEntityValidator;
