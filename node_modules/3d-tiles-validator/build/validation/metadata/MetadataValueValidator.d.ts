import { ValidationContext } from "./../ValidationContext";
import { Schema } from "3d-tiles-tools";
import { ClassProperty } from "3d-tiles-tools";
/**
 * A class for validations of metadata values against the definitions
 * from a `ClassProperty` from a metadata schema.
 *
 * The methods in this class assume that the property definitions
 * have already been validated with the `ClassPropertyValidator`.
 *
 * @internal
 */
export declare class MetadataValueValidator {
    /**
     * Validate the structure of the given value against the given
     * property definition.
     *
     * If will check the structure of the values based on the
     * type of the property:
     * - For STRING properties, they must be strings
     * - For ENUM properties, they must be strings that are the
     *   names of enum values
     * - For BOOLEAN properties, they must be booleans
     * - For arrays, they must be arrays accordingly
     * - For numeric types, they must be numbers or numeric arrays,
     *   as checked with `validateNumericValueStructure`
     *
     * @param propertyPath - The path for the property
     * @param propertyName - The name of the property
     * @param property - The actual property
     * @param valueName - The name of the value, to be used for the
     * validation issue message. For example, this may be "noData"
     * or "default".
     * @param value - The value
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    static validateValueStructure(propertyPath: string, propertyName: string, property: ClassProperty, valueName: string, value: any, schema: Schema, context: ValidationContext): boolean;
    /**
     * Validates that the given value is a value that matches the
     * given class property, which has type `"STRING"`.
     *
     * The general validity of the class property has already
     * been validated with the `ClassPropertyValidator`.
     *
     * @param propertyPath - The path for `ValidationIssue` instances
     * @param property - The `ClassProperty`
     * @param valueName - The name of the value
     * @param value - The value
     * @param context - The `ValidationContext`
     * @returns Whether the value was valid
     */
    private static validateStringValueStructure;
    /**
     * Validates that the given value is a value that matches the
     * given class property, which has type `"ENUM"`.
     *
     * The general validity of the class property has already
     * been validated with the `ClassPropertyValidator`.
     *
     * @param propertyPath - The path for `ValidationIssue` instances
     * @param property - The `ClassProperty`
     * @param valueName - The name of the value
     * @param value - The value
     * @param context - The `ValidationContext`
     * @returns Whether the value was valid
     */
    private static validateEnumValueStructure;
    /**
     * Make sure that the given `enumValueName` is valid.
     *
     * This is used for the validation of the names that appear in
     * the actual values that are supposed to represent enums. For
     * example, a `noData` value for an enum type may have the
     * value `"EXAMPLE_ENUM_VALUE`". This must be a string that
     * appears as the `enums[enumType].values[i].name` of the
     * corresponding enum type in the schema.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param name - The name of the enum value to be used in the
     * `ValidationIssue` message.
     * @param propertyName - The name of the property
     * @param enumType - The `enumType` of the property
     * @param enumValueName - The name of the enum value
     * @param enumValueNames - The valid enum value names
     * @param context - The `ValidationContext`
     * @returns Whether the name is valid
     */
    private static validateEnumValueName;
    /**
     * Validates that the given value is a value that matches the
     * given class property, which has type `"BOOLEAN"`.
     *
     * The general validity of the class property has already
     * been validated with the `ClassPropertyValidator`.
     *
     * @param propertyPath - The path for `ValidationIssue` instances
     * @param property - The `ClassProperty`
     * @param valueName - The name of the value
     * @param value - The value
     * @param context - The `ValidationContext`
     * @returns Whether the value was valid
     */
    private static validateBooleanValueStructure;
    /**
     * Validates that a value that appears in a property is a proper
     * numeric value that matches the type of the property.
     *
     * This is intended for the values that can be given as `offset`,
     * `scale`, `max`, and `min`, and performs the checks as defined in
     * `definitions.schema.json#/definitions/numericValue`.
     *
     * @param property - The ClassProperty
     * @param valueName - The name of the value (e.g. 'min' or 'offset')
     * @param value - The actual value
     * @param context - The `ValidationContext`
     * @returns Whether the value was valid
     */
    static validateNumericValueStructure(property: ClassProperty, valuePath: string, valueName: string, value: any, context: ValidationContext): boolean;
}
//# sourceMappingURL=MetadataValueValidator.d.ts.map