import { ValidationContext } from "./../ValidationContext";
import { ClassProperty } from "3d-tiles-tools";
/**
 * A class for validations of the `semantic` values of
 * `ClassProperty` objects.
 *
 * @internal
 */
export declare class ClassPropertySemanticsValidator {
    /**
     * Validate the `semantic` values of the given properties.
     *
     * This assumes that the properties have already been validated
     * with the `ClassPropertyValidator`, ensuring that the `semantic`
     * values are valid strings.
     *
     * @param metadataClassPath - The path for `ValidationIssue` instances
     * @param properties - The properties of the schema class
     * @param context - The `ValidatonContext`
     * @returns Whether the object was valid
     */
    static validateSemantics(metadataClassPath: string, properties: {
        [key: string]: ClassProperty;
    }, context: ValidationContext): boolean;
    /**
     * Validate that the type of the given property matches the
     * requirements that are defined by the given matcher.
     *
     * For information about the 'semanticMatcher', see createMatchingSchema.
     *
     * @param propertyPath - The path for `ValidationIssue` instances
     * @param propertyName - The name of the property
     * @param property - The `ClassProperty`
     * @param semantic - The `semantic`
     * @param semanticMatcher - The semantic matcher
     * @param context - The `ValidationContext`
     * @returns Whether the property type matched the structure
     * that is defined by the given matcher
     */
    private static validateSemantic;
    private static findSemanticMatcher;
    /**
     * Creates an object that resembles a `Schema`, but that is
     * used for matching the `semantic` of properties.
     *
     * The only difference to a `Schema` is that the
     * `matchingSchema.classes[className].properties[semanticName].componentType`
     * is a string that is used for creating a regular expression that the
     * actual `componentType` has to match. E.g. this may be `"FLOAT(32|64)"`
     * when the component type can either be `FLOAT32` or `FLOAT64`.
     *
     * Eventually, it might make sense to make the component types
     * unambiguous, so that the semantics definition is actually
     * a proper `Schema`. This could be achived by specific semantics
     * like `GEOMETRIC_ERROR_FLOAT32`.
     *
     * See https://github.com/CesiumGS/3d-tiles/issues/643
     *
     * @returns The matching schema
     */
    private static createMatchingSchema;
}
//# sourceMappingURL=ClassPropertySemanticsValidator.d.ts.map