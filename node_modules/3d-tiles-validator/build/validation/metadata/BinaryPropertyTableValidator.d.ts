import { ValidationContext } from "./../ValidationContext";
import { BinaryPropertyTable } from "3d-tiles-tools";
/**
 * A class for validations related to BinaryPropertyTable objects.
 *
 * @internal
 */
export declare class BinaryPropertyTableValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `BinaryPropertyTable`.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param binaryPropertyTable - The object to validate
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    static validateBinaryPropertyTable(path: string, binaryPropertyTable: BinaryPropertyTable, context: ValidationContext): boolean;
    /**
     * Validate a single property of a `BinaryPropertyTable`
     *
     * @param path - The path of the `PropertyTablePropery`, for
     * `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param classProperty - The `ClassProperty`
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the property is valid
     */
    private static validateBinaryPropertyTableProperty;
    /**
     * Validates the 'values' buffer view of the specified property,
     * to see whether it has the right byteOffset and byteLength.
     *
     * This is assumed to be called after the 'arrayOffsets' and
     * 'stringOffsets' have been validated for types that require
     * them.
     *
     * @param path - The path of the `PropertyTablePropery`, for
     * `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param classProperty - The `ClassProperty`
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the values are valid
     */
    private static validateValuesBufferView;
    /**
     * Validates the `arrayOffsets` of the specified property,
     * to see whether it has the right byteOffset, byteLength,
     * and contains ascending values.
     *
     * This assumes that the specified property is a variable-length
     * property.
     *
     * @param path - The path of the `PropertyTablePropery`, for
     * `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the property was valid
     */
    private static validateArrayOffsetsBufferView;
    /**
     * Validates the `stringOffsets` of the specified property,
     * to see whether it has the right byteOffset, byteLength,
     * and contains ascending values.
     *
     * This assumes that the specified property is a STRING property
     *
     * @param path - The path of the `PropertyTablePropery`, for
     * `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param numStrings - The number of strings. For non-array properties,
     * this is just the `propertyTable.count`. For fixed-length array
     * properties, this is `propertyTable.count * classProperty.count`.
     * For variable-length array properties, this is the last value
     * in the `arrayOffsets`.
     * @param context - The `ValidationContext`
     * @returns Whether the property was valid
     */
    private static validateStringOffsetsBufferView;
    /**
     * Validate that the offsets in the specified buffer view are ascending.
     *
     * This is used for `arrayOffsets` or `stringOffsets`, which are supposed
     * to contain ascending numbers (not necessarily strictly ascending).
     *
     * @param propertyPath - The base path for `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param bufferViewName - The name of the buffer view ('arrayOffsets',
     * or 'stringOffsets')
     * @param bufferViewIndex - The index of the buffer view (i.e. the
     * actual value of 'arrayOffsets', or 'stringOffsets')
     * @param componentType - The component type. This is either the
     * `arrayOffsetsType` or `stringOffsetsType`
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the offsets are valid
     */
    private static validateOffsets;
    /**
     * Validate the byte offset of the specified buffer view.
     *
     * The byte offset must be aligned to a multiple of the
     * size of the component type.
     *
     * @param propertyPath - The base path for `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param bufferViewName - The name of the buffer view ('values',
     * 'arrayOffsets', or 'stringOffsets')
     * @param bufferViewIndex - The index of the buffer view (i.e. the
     * actual value of 'values', 'arrayOffsets', or 'stringOffsets')
     * @param componentType - The component type. This is either the
     * component type of the property, or the `arrayOffsetsType`
     * or `stringOffsetsType`
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the byte offset was valid
     */
    private static validateBufferViewByteOffset;
    /**
     * Validate the byte length of the specified buffer view.
     *
     * The byte length must be `numValues*sizeof(componentType)`.
     *
     * This is intended for buffer views that are `arrayOffsets`
     * or `stringOffsets`.
     *
     * @param propertyPath - The path for `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param bufferViewName - The name of the buffer view
     * ('arrayOffsets', or 'stringOffsets')
     * @param bufferViewIndex - The index of the buffer view (i.e. the
     * actual value of 'values', 'arrayOffsets', or 'stringOffsets')
     * @param componentType - The component type. This is either the
     * `arrayOffsetsType` or `stringOffsetsType`
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param numValues - The number of values in the buffer view.
     * @param context - The `ValidationContext`
     * @returns Whether the byte length was valid
     */
    private static validateOffsetBufferViewByteLength;
    /**
     * Validate the byte length of the specified buffer view.
     *
     * The byte length must be `numValues*sizeof(componentType)`.
     *
     * This is intended for buffer views that contain the values
     * of STRING typed properties.
     *
     * @param propertyPath - The path for `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param bufferViewIndex - The index of the buffer view (i.e. the
     * actual value of the 'values')
     * @param componentType - The resolved component type (this is
     * assumed to already have possible default values, like
     * UINT8 for BOOLEAN and STRING types)
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param numValues - The number of values in the buffer view.
     * @param context - The `ValidationContext`
     * @returns Whether the byte length was valid
     */
    private static validateValuesBufferViewByteLength;
    /**
     * Creates an elaborate error message explaining why a certain
     * buffer view byte length was expected, when the actual byte
     * length did not match the expected one.
     *
     * @param propertyId - The property ID
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param componentType - The component type. This is assumed
     * to already have default values (e.g. UINT8 for BOOLEAN)
     * @param numValues - The number of values, as computed with
     * `computeNumberOfValues`
     * @param expectedByteLength - The expected byte length
     * @returns The error message
     */
    private static createByteLengthMessage;
    /**
     * Computes the number of 'values' for the specified property.
     *
     * This computes the number of values that should be in the
     * 'values' buffer view, depending on the type of the property
     * and the `count` (number of rows) of the property table.
     *
     * This refers to the components of the property type, i.e.
     * - it will be 3 for a single VEC3 property
     * - it will be the string length (in bytes) for a single STRING
     * - it will be the number of bits for a BOOLEAN property
     *
     * @param propertyId - The property ID
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @returns The number of values
     */
    private static computeNumberOfValues;
    /**
     * Returns the array offset of the given property at the specified
     * index.
     *
     * This assumes that the property is a variable-length array property
     * and the requried structures for accessing that data have already
     * been validated.
     *
     * @param propertyId - The property ID
     * @param index - The index
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @returns The array offset
     */
    private static getValidatedArrayOffset;
    /**
     * Returns the string offset of the given property at the specified
     * index.
     *
     * This assumes that the property is a STRING property and the
     * requried structures for accessing that data have already
     * been validated.
     *
     * @param propertyId - The property ID
     * @param index - The index
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @returns The string offset
     */
    private static getValidatedStringOffset;
}
//# sourceMappingURL=BinaryPropertyTableValidator.d.ts.map