import { ValidationContext } from "./../ValidationContext";
import { BinaryPropertyTable } from "3d-tiles-tools";
/**
 * A class for the validation of values that are stored
 * in binary property tables.
 *
 * The methods in this class assume that the structural
 * validity of the input objects has already been checked
 * by a `PropertyTableValidator` and a
 * `BinaryPropertyTableValidator`.
 *
 * @internal
 */
export declare class BinaryPropertyTableValuesValidator {
    /**
     * Performs the validation to ensure that the given
     * `BinaryPropertyTable` contains valid values.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param binaryPropertyTable - The object to validate
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the values in the object have been valid
     */
    static validateBinaryPropertyTableValues(path: string, binaryPropertyTable: BinaryPropertyTable, context: ValidationContext): boolean;
    /**
     * Validate the values of a single property of a `BinaryPropertyTable`
     *
     * @param path - The path of the `PropertyTablePropery`, for
     * `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param classProperty - The `ClassProperty`
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the property is valid
     */
    private static validateBinaryPropertyTablePropertyValues;
    /**
     * Validate that the values of the specified ENUM property are valid.
     *
     * This applies to properties in the given binary property table
     * that have the ENUM type, both for arrays and non-arrays. It
     * will ensure that each value that appears as in the binary data
     * is a value that was actually defined as one of the
     * `enum.values[i].value` values in the schema definition.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the enum values have been valid
     */
    private static validateEnumValues;
    /**
     * Validate the that none of the values of the specified
     * property in the given property table is smaller than
     * the given defined minimum.
     *
     * @param path - The path of the `PropertyTablePropery`, for
     * `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param definedMin - The defined minimum
     * @param definedMinInfo - A string indicating the source of the minimum
     * definition: 'class property' or 'property table property'.
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the values obeyed the limit
     */
    private static validateMin;
    /**
     * Compute the mimimum value for the specified property in
     * the given property table.
     *
     * This assumes that the property has a numeric type,
     * as indicated by `ClassProperties.hasNumericType`.
     *
     * @param propertyId - The property ID
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @returns The minimum
     */
    private static computeMin;
    /**
     * Validate the that none of the values of the specified
     * property in the given property table is smaller than
     * the given defined maximum.
     *
     * @param path - The path of the `PropertyTablePropery`, for
     * `ValidationIssue` instances
     * @param propertyId - The property ID
     * @param definedMax - The defined maximum
     * @param definedMaxInfo - A string indicating the source of the maximum
     * definition: 'class property' or 'property table property'.
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @param context - The `ValidationContext`
     * @returns Whether the values obeyed the limit
     */
    private static validateMax;
    /**
     * Compute the maximum value for the specified property in
     * the given property table.
     *
     * This assumes that the property has a numeric type,
     * as indicated by `ClassProperties.hasNumericType`.
     *
     * @param propertyId - The property ID
     * @param binaryPropertyTable - The `BinaryPropertyTable`
     * @returns The maximum
     */
    private static computeMax;
    /**
     * Creates a message that describes how a metadata value was computed.
     *
     * The intention is to insert this as `The value is ${valueMessagePart}`
     * in a message that explains how the `value` was computed from the
     * raw value, normalization, offset and scale.
     *
     * @param rawValue - The raw value, as obtained from the `PropertyModel`,
     * without normalization, offset, or scale
     * @param normalized - Whether the value is normalized
     * @param scale - The optional scale
     * @param offset - The optional offset
     * @param value - The final value
     * @returns The message part
     */
    private static createValueMessagePart;
}
//# sourceMappingURL=BinaryPropertyTableValuesValidator.d.ts.map