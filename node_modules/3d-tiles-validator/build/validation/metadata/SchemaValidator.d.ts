import { ValidationContext } from "./../ValidationContext";
import { Validator } from "./../Validator";
import { Schema } from "3d-tiles-tools";
/**
 * A class for validations related to `schema` objects.
 *
 * @internal
 */
export declare class SchemaValidator implements Validator<Schema> {
    /**
     * Performs the validation of the schema that is parsed from the
     * given input string.
     *
     * @param input - The string that was read from a schema JSON file
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether the object was valid or not.
     */
    validateJsonString(input: string, context: ValidationContext): Promise<boolean>;
    /**
     * Implementation of the `Validator` interface that just passes the
     * input to `validateSchema`.
     *
     * @param input - The `Schema` object
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether the object was valid or not.
     */
    validateObject(path: string, input: Schema, context: ValidationContext): Promise<boolean>;
    /**
     * Performs the validation of the given `Schema` object that was parsed
     * from a schema JSON input.
     *
     * Issues that are encountered during the validation will be added
     * as `ValidationIssue` instances to the given `ValidationContext`.
     *
     * @param path - The path for the given object. This may either
     * be `"/schema"` (for a `tileset.schema`), or the empty string
     * (for a schema that was read from a standalone schema file).
     * @param schema - The `Schema` object
     * @param context - The `ValidationContext`
     */
    static validateSchema(path: string, schema: Schema, context: ValidationContext): boolean;
}
//# sourceMappingURL=SchemaValidator.d.ts.map