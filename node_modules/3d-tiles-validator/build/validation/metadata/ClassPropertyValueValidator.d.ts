import { ValidationContext } from "../ValidationContext";
import { ClassProperty } from "3d-tiles-tools";
/**
 * A class for validations of metadata values against the definitions
 * from a `ClassProperty` from a metadata schema.
 *
 * The methods in this class assume that the property definitions
 * have already been validated with the `ClassPropertyValidator`.
 *
 * @internal
 */
export declare class ClassPropertyValueValidator {
    /**
     * Validates that the given value is a proper `max` or `min` value
     * for the given property.
     *
     * If the property does not have a numeric type, then a
     * `METADATA_MIN_MAX_FOR_NON_NUMERIC_TYPE` validation
     * issue will be added to the given context.
     *
     * If the structure of the given value does not match the
     * structure that is defined by the property type, then an
     * appropriate issue will be added to the given context.
     *
     * @param propertyPath - The path for the `ValidationIssue` instances
     * @param propertyName - The name for the `ValidationIssue` instances
     * @param property - The `ClassProperty`
     * @param maxOrMin - The name, "max" or "min"
     * @param value - The actual value
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    static validateMaxMin(propertyPath: string, propertyName: string, property: ClassProperty, maxOrMin: string, value: any, context: ValidationContext): boolean;
    /**
     * Validates that the given value is a proper `offset` or `scale` value
     * for the given property.
     *
     * If the property does not have a numeric type, then a
     * `METADATA_OFFSET_SCALE_FOR_NON_FLOATING_POINT_TYPE` validation
     * issue will be added to the given context.
     *
     * If the structure of the given value does not match the
     * structure that is defined by the property type, then an
     * appropriate issue will be added to the given context.
     *
     * @param propertyPath - The path for the `ValidationIssue` instances
     * @param propertyName - The name for the `ValidationIssue` instances
     * @param property - The `ClassProperty`
     * @param offsetOrScale - The name, "offset" or "scale"
     * @param value - The actual value
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    static validateOffsetScale(propertyPath: string, propertyName: string, property: ClassProperty, offsetOrScale: string, value: any, context: ValidationContext): boolean;
}
//# sourceMappingURL=ClassPropertyValueValidator.d.ts.map