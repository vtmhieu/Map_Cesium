import { ValidationContext } from "./ValidationContext";
import { BoundingVolume } from "3d-tiles-tools";
/**
 * A class for validations related to `boundingVolume` objects.
 *
 * @internal
 */
export declare class BoundingVolumeValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `boundingVolume` object.
     *
     * @param boundingVolumePath - The path that indicates the location of
     * the given object, to be used in the validation issue message.
     * @param boundingVolume - The object to validate
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the given object is valid
     */
    static validateBoundingVolume(boundingVolumePath: string, boundingVolume: BoundingVolume, context: ValidationContext): Promise<boolean>;
    /**
     * Implementation for validateBoundingVolume
     *
     * @param boundingVolumePath - The path that indicates the location of
     * the given object, to be used in the validation issue message.
     * @param boundingVolume - The object to validate
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the given object is valid
     */
    private static validateBoundingVolumeInternal;
    /**
     * Perform a validation of the given `boundingVolume.box` array.
     *
     * @param path - The path for the validation issues
     * @param box - The box array
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    static validateBoundingBox(path: string, box: number[], context: ValidationContext): boolean;
    /**
     * Perform a validation of the given `boundingVolume.sphere` array.
     *
     * @param path - The path for the validation issues
     * @param sphere - The sphere array
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    static validateBoundingSphere(path: string, sphere: number[], context: ValidationContext): boolean;
    /**
     * Perform a validation of the given `boundingVolume.region` array.
     *
     * @param path - The path for the validation issues
     * @param region - The region array
     * @param context - The `ValidationContext`
     * @returns Whether the object was valid
     */
    static validateBoundingRegion(path: string, region: number[], context: ValidationContext): boolean;
}
//# sourceMappingURL=BoundingVolumeValidator.d.ts.map