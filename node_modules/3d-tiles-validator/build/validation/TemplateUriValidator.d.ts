import { ValidationContext } from "./ValidationContext";
/**
 * A class for validations related to tempalte URIs for implicit tiling
 *
 * @internal
 */
export declare class TemplateUriValidator {
    /**
     * Validate that the given URI is a valid template URI.
     *
     * If the URI is valid, then `true` is returned.
     *
     * If the URI contains a `{variable}` expression with a variable
     * name that is not `level`, `x`, `y` (or `z` for "OCTREE"), then
     * a `TEMPLATE_URI_INVALID_VARIABLE_NAME` validation issue will
     * be added to the given context, and `false` is returned.
     *
     * If the URI does not contain one of these (expected) variable names,
     * then a `TEMPLATE_URI_MISSING_VARIABLE_NAME` (warning) issue will
     * be added to the given context, but `true` will still be returned.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param name - A name for the uri
     * @param uri - The uri
     * @param subdivisionScheme - The subdivisionScheme, "QUADTREE" or "OCTREE"
     * @param context - The `ValidationContext`
     * @returns Whether the given URI is a valid template URI
     */
    static validateTemplateUri(path: string, name: string, uri: string, subdivisionScheme: string, context: ValidationContext): boolean;
}
//# sourceMappingURL=TemplateUriValidator.d.ts.map