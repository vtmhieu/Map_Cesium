import { ValidationIssue } from "./ValidationIssue";
import { ValidationIssueFilter } from "./ValidationIssueFilter";
/**
 * A class summarizing the result of a validation pass.
 *
 * It mainly summarizes a set of `ValidationIssue` instances.
 *
 * @beta
 */
export declare class ValidationResult {
    /**
     * The date when this instance was created (this
     * indicates the start of the validation process)
     */
    private readonly _date;
    /**
     * The list of `ValidationIssue` instances
     */
    private readonly _issues;
    /**
     * Creates a new, empty validation result.
     *
     * Clients should not call this method. They only receive
     * validation results from the validation methods.
     *
     * @returns The new `ValidationResult`
     * @internal
     */
    static create(): ValidationResult;
    /**
     * Private constructor for `filter`
     *
     * @param date - The date that is stored in the result
     */
    private constructor();
    /**
     * Creates a new `ValidationResult` by filtering this one,
     * using the given `ValidationIssueFilter` as the inclusion
     * predicate.
     *
     * @param includePredicate - The predicate that determines whether
     * a certain issue should be included in the result
     * @returns The filtered result
     */
    filter(includePredicate: ValidationIssueFilter): ValidationResult;
    /**
     * Returns a read-only view on the issues of this result
     */
    get issues(): readonly ValidationIssue[];
    /**
     * Adds a new `ValidationIssue` to this result.
     *
     * This method should not be called by clients. It is mainly
     * intended for the `ValidationContext#addIssue` method,
     * to collect the issues during validation.
     *
     * @param issue - The `ValidationIssue` to add.
     * @internal
     */
    add(issue: ValidationIssue): void;
    /**
     * Returns the number of issues that are contained in this result
     *
     * @returns The number of issues
     */
    get length(): number;
    /**
     * Returns the validation issue at the specified index in this
     * result
     *
     * @param index - The index
     * @returns The validation issue
     */
    get(index: number): ValidationIssue;
    /**
     * Computes the number of issues in this result that have
     * the `ERROR` severity level
     *
     * @internal
     */
    get numErrors(): number;
    /**
     * Computes the number of issues in this result that have
     * the `WARNING` severity level
     *
     * @internal
     */
    get numWarnings(): number;
    /**
     * Computes the number of issues in this result that have
     * the `INFO` severity level
     *
     * @internal
     */
    get numInfos(): number;
    /**
     * Counts the number of issues in this result that have the
     * given severity level
     *
     * @param severity - The severity level
     * @returns The number of issues
     */
    private count;
    /**
     * Creates a JSON representation of this result and all the
     * issues that it contains.
     *
     * @returns The JSON representation of this result
     * @internal
     */
    toJson(): any;
    /**
     * Creates a JSON string representation of this result.
     *
     * Some details about the format of this result are not yet
     * specified, and might change in future releases.
     *
     * @returns The string representation
     */
    serialize(): string;
}
//# sourceMappingURL=ValidationResult.d.ts.map