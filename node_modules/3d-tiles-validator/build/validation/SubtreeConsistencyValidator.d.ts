import { ValidationContext } from "./ValidationContext";
import { Subtree } from "3d-tiles-tools";
import { TileImplicitTiling } from "3d-tiles-tools";
/**
 * A class for the validation of the consistency of subtrees.
 *
 * The functions in this class are supposed to be called after the
 * basic validity has been checked with the `SubtreeValidator`.
 *
 * They perform the validity checks for the buffer data layout
 * and availability data, referring to the information that is
 * given in the `TileImplicitTiling` structure.
 *
 * They will **NOT** analyze the actual buffer data.
 *
 * @internal
 */
export declare class SubtreeConsistencyValidator {
    /**
     * Perform basic consistency validation on the given subtree object.
     *
     * This assumes that the basic (JSON-level) structural validations
     * have already been performed. It will only validate the consistency
     * of the memory layout of buffer views, buffers, and the availability
     * information.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param subtree - The `Subtree` object
     * @param implicitTiling - The `TileImplicitTiling` object. If this
     * is not given, then the validation of the availability information
     * (that requires information about the subtree structure) will be
     * skipped
     * @param context - The `ValidationCondext`
     * @returns Whether the data was consistent
     */
    static validateSubtreeConsistency(path: string, subtree: Subtree, implicitTiling: TileImplicitTiling | undefined, context: ValidationContext): boolean;
    /**
     * Performs the consistency checks for the `tileAvailability`,
     * `contentAvailability` and `childSubtreeAvailability` objects
     * in the given subtree.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param subtree - The `Subtree` object
     * @param implicitTiling - The `TileImplicitTiling` that defines the
     * subtree structure
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    private static validateSubtreeAvailabilityConsistency;
    /**
     * Perform the consistency checks for the given availability object.
     *
     * This will check whether the object refers to a valid buffer view,
     * and the buffer view has a length that is sufficient for the
     * respective availability information.
     *
     * @param path - The path for the `ValidationIssue` instances
     * @param availability - The `Availability` object
     * @param requiredLengthInBits - The length, in bits, that is required
     * for storing the given availability information
     * @param subtree - The `Subtree` object
     * @param implicitTiling - The `TileImplicitTiling` that defines the
     * subtree structure
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    private static validateAvailabilityConsistency;
}
//# sourceMappingURL=SubtreeConsistencyValidator.d.ts.map