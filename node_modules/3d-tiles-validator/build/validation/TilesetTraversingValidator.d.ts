import { ValidationContext } from "./ValidationContext";
import { ValidationState } from "./ValidationState";
import { Tileset } from "3d-tiles-tools";
/**
 * A validator for a `Tileset` that traverses the tile hierarchy
 * and performs the validation of the tile instances, their contents,
 * and the consistency of the tile hierarchy.
 *
 * @internal
 */
export declare class TilesetTraversingValidator {
    /**
     * Validates the given tileset, by traversing the tile hierarchy
     * and validating each traversed tile.
     *
     * @param tileset - The `Tileset`
     * @param validationState - The `ValidationState`
     * @param context - The `TraversalContext`
     * @returns A promise that resolves when the validation is finished
     * and indicates whether every traversed tile was valid.
     */
    static validateTileset(tileset: Tileset, validationState: ValidationState, context: ValidationContext): Promise<boolean>;
    /**
     * Validates the given traversed tile.
     *
     * This will validate the tile that is represented with the given
     * traversed tile, so far that it ensures that it is a valid
     * tile object and can be traversed further.
     *
     * It will not validate the tile content. This is done with
     * `validateTraversedTileContent`
     *
     * @param traversedTile - The `TraversedTile`
     * @param validationState - The `ValidationState`
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     */
    private static validateTraversedTile;
    /**
     * Validates the given explicit traversed tile.
     *
     * This will ONLY validate the elements that are specific for
     * an `ExplicitTraversedTile` (compared to a `TraversedTile`) ,
     * namely the `implicitTiling` and `metadata` of the tile.
     *
     * @param traversedTile - The `ExplicitTraversedTile`
     * @param validationState - The `ValidationState`
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     */
    private static validateExplicitTraversedTile;
    /**
     * Validates the content in given traversed tile.
     *
     * This assumes that the given tile already has been determined to
     * be basically valid, as of `validateTraversedTile`.
     *
     * @param traversedTile - The `TraversedTile`
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     */
    private static validateTraversedTileContent;
    /**
     * Performs the validation to make sure that the specified subtree
     * root is valid.
     *
     * This will attempt to resolve the `.subtree` (or subtree JSON)
     * data from the URI that is created by substituting the given
     * coordinates into the subtree template URI of the implicit tiling,
     * resolve the resulting data, and pass it to a `SubtreeValidator`.
     *
     * @param tilePath - The path for `ValidationIssue` instances
     * @param implicitTiling - The `TileImpllicitTiling`
     * @param subtreeUri - The subtree URI
     * @param validationState - The `ValidationState`
     * @param context - The `ValidationContext`
     * @returns A promise that resolves when the validation is finished
     */
    private static validateSubtreeRoot;
    /**
     * Validate the consistency of the given traversed tile instances.
     *
     * This will check the conditions that must hold for parent/child
     * tiles, for example, the consistency of the geometric error
     *
     * @param traversedParent - The parent `TraversedTile`
     * @param traversedTile - The current `TraversedTile`
     * @param context - The `ValidationContext`
     */
    private static validateTraversedTiles;
}
//# sourceMappingURL=TilesetTraversingValidator.d.ts.map