"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatisticsValidator = void 0;
const _3d_tiles_tools_1 = require("3d-tiles-tools");
const BasicValidator_1 = require("./BasicValidator");
const RootPropertyValidator_1 = require("./RootPropertyValidator");
const ExtendedObjectsValidators_1 = require("./ExtendedObjectsValidators");
const StructureValidationIssues_1 = require("../issues/StructureValidationIssues");
const StatisticsClassValidator_1 = require("./StatisticsClassValidator");
/**
 * A class for validations related to `statistics` objects.
 *
 * @internal
 */
class StatisticsValidator {
    /**
     * Performs the validation to ensure that the given object is a
     * valid `statistics` object.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param statistics - The object to validate
     * @param validationState - The `ValidationState`.
     * @param context - The `ValidationContext` that any issues will be added to
     * @returns Whether the object was valid
     */
    static validateStatistics(path, statistics, validationState, context) {
        // Make sure that the given value is an object
        if (!BasicValidator_1.BasicValidator.validateObject(path, "statistics", statistics, context)) {
            return false;
        }
        let result = true;
        // Validate the object as a RootProperty
        if (!RootPropertyValidator_1.RootPropertyValidator.validateRootProperty(path, "statistics", statistics, context)) {
            result = false;
        }
        // Perform the validation of the object in view of the
        // extensions that it may contain
        if (!ExtendedObjectsValidators_1.ExtendedObjectsValidators.validateExtendedObject(path, statistics, context)) {
            result = false;
        }
        // If there was an extension validator that overrides the
        // default validation, then skip the remaining validation.
        if (ExtendedObjectsValidators_1.ExtendedObjectsValidators.hasOverride(statistics)) {
            return result;
        }
        // Validate the classes
        const classes = statistics.classes;
        const classesPath = path + "/classes";
        if ((0, _3d_tiles_tools_1.defined)(classes)) {
            // The classes MUST be an object
            if (!BasicValidator_1.BasicValidator.validateObject(classesPath, "classes", classes, context)) {
                result = false;
            }
            else {
                // The classes MUST have at least 1 property
                if (!BasicValidator_1.BasicValidator.validateNumberOfProperties(classesPath, "classes", classes, 1, undefined, context)) {
                    result = false;
                }
                // If there are classes, then there must be a schema
                if (!validationState.hasSchemaDefinition) {
                    const message = "The tileset defines 'statistics.classes' but does not have a schema";
                    const issue = StructureValidationIssues_1.StructureValidationIssues.REQUIRED_VALUE_NOT_FOUND(classesPath, message);
                    context.addIssue(issue);
                    result = false;
                }
                else if ((0, _3d_tiles_tools_1.defined)(validationState.validatedSchema)) {
                    // Validate all entries of the classes dictionary
                    for (const className of Object.keys(classes)) {
                        const statisticsClass = classes[className];
                        if (!StatisticsClassValidator_1.StatisticsClassValidator.validateStatisticsClass(statisticsClass, className, validationState.validatedSchema, context)) {
                            result = false;
                        }
                    }
                }
            }
        }
        return result;
    }
}
exports.StatisticsValidator = StatisticsValidator;
