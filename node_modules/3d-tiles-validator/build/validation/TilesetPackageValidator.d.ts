import { Validator } from "./Validator";
import { ValidationContext } from "./ValidationContext";
/**
 * An implementation of a validator that validates a `TilesetSource`.
 *
 * The actual validation function is `validatePackageFile`.
 *
 * This class also implements the `Validator` interface, so that
 * instances of it can be used when the tile content is a
 * tileset package. In this case, the validated type is `string`, where
 * this string is the 'resolvedUri' that points to a file in the
 * local file system.
 *
 * @internal
 */
export declare class TilesetPackageValidator implements Validator<string> {
    /**
     * Implementation of the `Validator` interface. This validates
     * the given 'resolvedUri' string, assuming that it is a full
     * path to a tileset package in the local file system.
     *
     * @param uri - The (usually relative) URI of the package
     * @param resolvedUri - The resolved URI, which is the full URI
     * of the package in the local file system.
     * @param context - The `ValidationContext`
     * @returns A promise that is fulfilled when the validation is finished
     * and indicates whether the object was valid or not.
     */
    validateObject(uri: string, resolvedUri: string, context: ValidationContext): Promise<boolean>;
    /**
     * Validates the tileset that is contained in the package that is
     * pointed to by the given URI (assuming that it is a file in
     * the local file system).
     *
     * @param uri - The full URI of the package file
     * @param context - The `ValidationContext`
     * @returns A promise that indicates whether the package contained
     * a valid tileset.
     */
    static validatePackageFile(uri: string, context: ValidationContext): Promise<boolean>;
    /**
     * Validates the tileset that is contained in the package that is
     * pointed to by the given URI (assuming that it is a file in
     * the local file system).
     *
     * @param uri - The full URI of the package file
     * @param isContent - Whether the given package was found as a tile
     * content. If this is the case, then the issues that are found
     * in the package will be summarized in a `CONTENT_VALIDATION_`
     * issue. Otherwise, they will be added directly to the given context.
     * @param context - The `ValidationContext`
     * @returns A promise that indicates whether the package contained
     * a valid tileset.
     */
    private static validatePackageFileInternal;
    /**
     * Validates the tileset that is contained in the given `TilesetSource`.
     *
     * The caller is responsible for calling 'open' on the source before
     * passing it to this method, and 'close' after this method returns.
     *
     * @param uri - The full URI of the package file
     * @param tilesetSource - The `TilesetSource` that was created from
     * the package file
     * @param isContent - Whether the given package was found as a tile
     * content. If this is the case, then the issues that are found
     * in the package will be summarized in a `CONTENT_VALIDATION_`
     * issue. Otherwise, they will be added directly to the given context.
     * @param context - The `ValidationContext`
     * @returns A promise that indicates whether the package contained
     * a valid tileset.
     */
    private static validatePackageInternal;
}
//# sourceMappingURL=TilesetPackageValidator.d.ts.map