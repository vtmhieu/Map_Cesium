import { ValidationIssue } from "../validation/ValidationIssue";
/**
 * Methods to create `ValidationIssue` instances that describe
 * issues related to binary data of tile content or subtree files.
 */
export declare class BinaryValidationIssues {
    /**
     * Indicates that the binary data was fundamentally invalid (usually
     * caused by not even being able to read a header)
     *
     * @param path - The path for the `ValidationIssue`
     * @param message - The message for the `ValidationIssue`
     * @returns The `ValidationIssue`
     */
    static BINARY_INVALID(path: string, message: string): ValidationIssue;
    /**
     * Indicates that an unexpected value was found in the binary -
     * for example, an unexpected magic value or version.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the value
     * @param expected - The expected value
     * @param actual - The actual value
     * @returns The `ValidationIssue`
     */
    static BINARY_INVALID_VALUE(path: string, name: string, expected: any, actual: any): ValidationIssue;
    private static _BINARY_INVALID_VALUE;
    /**
     * Indicates that the byte length information that was read from
     * binary was inconsistent. For example, when the total byte length
     * from the header does not match the length of the binary blob.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - A short name for the length
     * @param expectedLength - The expected length
     * @param actualLength - The actual length
     * @returns The `ValidationIssue`
     */
    static BINARY_INVALID_LENGTH(path: string, name: string, expectedLength: number | bigint, actualLength: number | bigint): ValidationIssue;
    private static _BINARY_INVALID_LENGTH;
    /**
     * Indicates that an alignment requirement for a part of the
     * binary data was not met.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - A short name for the part of the binary data
     * @param expectedAlignment - The expected alignment
     * @returns The `ValidationIssue`
     */
    static BINARY_INVALID_ALIGNMENT(path: string, name: string, expectedAlignment: number | bigint, actualValue: number | bigint, misalignment: number | bigint): ValidationIssue;
    static _BINARY_INVALID_ALIGNMENT(path: string, message: string): ValidationIssue;
    /**
     * Indicates that an alignment requirement for a part of the
     * binary data was not met.
     *
     * This is only used for the legacy tile formats validations.
     * New alignment checks should use the convenience method
     * `BinaryValidator#validateAlignment`, which creates more
     * elaborate messages.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - A short name for the part of the binary data
     * @param expectedAlignment - The expected alignment
     * @returns The `ValidationIssue`
     */
    static BINARY_INVALID_ALIGNMENT_legacy(path: string, name: string, expectedAlignment: number): ValidationIssue;
}
//# sourceMappingURL=BinaryValidationIssues.d.ts.map