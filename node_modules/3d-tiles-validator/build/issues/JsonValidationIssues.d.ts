import { ValidationIssue } from "../validation/ValidationIssue";
/**
 * Methods to create `ValidationIssue` instances that describe
 * issues on the level of JSON schema constraints.
 *
 * Most of the issues in this class are generated by the
 * `BasicValidator` functions.
 */
export declare class JsonValidationIssues {
    /**
     * Indicates that a property that is marked as 'required' in the
     * schema was missing.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the missing property
     * @returns The `ValidationIssue`
     */
    static PROPERTY_MISSING(path: string, name: string): ValidationIssue;
    private static _PROPERTY_MISSING;
    /**
     * Indicates that a property had a type that was different
     * than the one in the JSON schema.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the property
     * @param expectedType - The expected type
     * @param actualType - The actual type
     * @returns The `ValidationIssue`
     */
    static TYPE_MISMATCH(path: string, name: string, expectedType: string, actualType: string): ValidationIssue;
    private static _TYPE_MISMATCH;
    /**
     * Indicates that an array element had a type that was different
     * than the one in the JSON schema.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the array property
     * @param index - The index of the element
     * @param expectedType - The expected type
     * @param actualType - The actual type
     * @returns The `ValidationIssue`
     */
    static ARRAY_ELEMENT_TYPE_MISMATCH(path: string, name: string, index: number, expectedType: string, actualType: string): ValidationIssue;
    private static _ARRAY_ELEMENT_TYPE_MISMATCH;
    /**
     * Indicates that a value in an array was not unique, even though
     * the items are required to be unique due to `uniqueItems:true`
     * in the JSON schema.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the array property
     * @param item - The duplicate item
     * @returns The `ValidationIssue`
     */
    static ARRAY_ELEMENT_NOT_UNIQUE(path: string, name: string, item: any): ValidationIssue;
    /**
     * Indicates that a numeric value was not in the range that
     * is specified by the JSON schema via the `minimum` and
     * `maximum` constraints.
     *
     * @param path - The path for the `ValidationIssue`
     * @param message - The message for the `ValidationIssue`
     * @returns The `ValidationIssue`
     */
    static VALUE_NOT_IN_RANGE(path: string, message: string): ValidationIssue;
    /**
     * Indicates that a value was not in the set of allowed
     * values. This usually refers to enum values.
     *
     * @param path - The path for the `ValidationIssue`
     * @param message - The message for the `ValidationIssue`
     * @returns The `ValidationIssue`
     */
    static VALUE_NOT_IN_LIST(path: string, message: string): ValidationIssue;
    /**
     * Indicates that the length of an array does not match the length
     * that is specified via the JSON schema, using the `minItems`
     * and `maxItems` constraints.
     *
     * @param path - The path for the `ValidationIssue`
     * @param message - The message for the `ValidationIssue`
     * @returns The `ValidationIssue`
     */
    static ARRAY_LENGTH_MISMATCH(path: string, message: string): ValidationIssue;
    /**
     * Indicates that the length of a string does not match the length
     * that is specified via the JSON schema, using the `minLength`
     * and `maxLength` constraints.
     *
     * @param path - The path for the `ValidationIssue`
     * @param message - The message for the `ValidationIssue`
     * @returns The `ValidationIssue`
     */
    static STRING_LENGTH_MISMATCH(path: string, message: string): ValidationIssue;
    /**
     * Indicates that the number of properties of an object does not match
     * meet the constraints that are specified via the JSON schema, using
     * the `minProperties` and `maxProperties` properties.
     *
     * @param path - The path for the `ValidationIssue`
     * @param message - The message for the `ValidationIssue`
     * @returns The `ValidationIssue`
     */
    static NUMBER_OF_PROPERTIES_MISMATCH(path: string, message: string): ValidationIssue;
    /**
     * Indicates that the pattern of a string property does not match the
     * required regular expression.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the property
     * @param value - The value of the property
     * @param pattern - A string representation of the expected pattern
     * @returns The `ValidationIssue`
     */
    static STRING_PATTERN_MISMATCH(path: string, name: string, value: string, pattern: string): ValidationIssue;
    private static _STRING_PATTERN_MISMATCH;
    /**
     * Indicates that multiple properties have been defined, when
     * only one of them should have been defined.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the containing object
     * @param properties - The names of the properties
     * @returns The `ValidationIssue`
     */
    static ONE_OF_ERROR(path: string, name: string, ...properties: string[]): ValidationIssue;
    private static _ONE_OF_ERROR;
    /**
     * Indicates that one of several properties must be defined,
     * but none of them was defined.
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the containing object
     * @param properties - The names of the properties
     * @returns The `ValidationIssue`
     */
    static ANY_OF_ERROR(path: string, name: string, ...properties: string[]): ValidationIssue;
    private static _ANY_OF_ERROR;
    /**
     * Indicates that a property had a type that it should not have.
     *
     * This is ONLY used for the `rootProperty.extras` validation:
     * While the `extras` may have any type, a general best practice
     * is to let it be a dictionary (and not, for example, a string)
     *
     * @param path - The path for the `ValidationIssue`
     * @param name - The name of the property
     * @param expectedType - The expected type
     * @param actualType - The actual type
     * @returns The `ValidationIssue`
     */
    static TYPE_UNEXPECTED(path: string, name: string, expectedType: string, actualType: string): ValidationIssue;
    private static _TYPE_UNEXPECTED;
}
//# sourceMappingURL=JsonValidationIssues.d.ts.map