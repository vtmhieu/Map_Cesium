/// <reference types="node" />
import { Validator } from "../validation/Validator";
import { ValidationContext } from "../validation/ValidationContext";
/**
 * A thin wrapper around the `gltf-validator`, implementing the
 * `Validator` interface for glTF- and GLB data that is given
 * in a Buffer.
 *
 * @internal
 */
export declare class GltfValidator implements Validator<Buffer> {
    /**
     * Creates a `ValidationIssue` object for the given 'message' object
     * that appears in the output of the glTF validator.
     *
     * @param gltfMessage - The glTF validator message
     * @returns The `ValidationIssue`
     */
    private static createValidationIssueFromGltfMessage;
    /**
     * The data that is given as the `input` to `validateObject` might
     * contain padding bytes (for example, when it was extracted
     * from a B3DM file).
     *
     * If the given input is GLB data, then this method will strip
     * any padding bytes, by restricting the buffer to the length
     * that was obtained from the GLB header.
     *
     * If the given data is not GLB data (for example, it might be
     * glTF JSON data!), then the buffer is returned, unmodified.
     *
     * @param input - The buffer, including possible padding
     * @returns The resulting buffer
     */
    private static stripPadding;
    validateObject(uri: string, input: Buffer, context: ValidationContext): Promise<boolean>;
}
//# sourceMappingURL=GltfValidator.d.ts.map