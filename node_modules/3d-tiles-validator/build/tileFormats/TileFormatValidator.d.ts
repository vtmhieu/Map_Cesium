/// <reference types="node" />
import { ValidationContext } from "../validation/ValidationContext";
/**
 * An interface describing the table data that was read from
 * a tile content.
 *
 * @internal
 */
export interface BinaryTableData {
    featureTableJson: any;
    featureTableBinary: Buffer;
    batchTableJson: any;
    batchTableBinary: Buffer;
    glbData: Buffer;
}
/**
 * Methods to validate and extract the binary table data from
 * tile content.
 *
 * @internal
 */
export declare class TileFormatValidator {
    /**
     * Validates the common part of all tile format headers.
     *
     * This validates that the given input has at least the
     * given header byte length, and whether the 'magic',
     * and 'byteLength' fields of the header have the expected
     * values. (The 'version' is validated to always be '1')
     *
     * @param path - The path for `ValidationIssue` instances
     * @param input - The input buffer
     * @param headerByteLength - The header byte length
     * @param expectedMagic - The expected magic value
     * @param context - The `ValidationContext`
     * @returns Whether the header was valid
     */
    static validateHeader(path: string, input: Buffer, headerByteLength: number, expectedMagic: string, context: ValidationContext): boolean;
    /**
     * Extracts the binary table data from the given tile content,
     * if it is valid.
     *
     * This is used for B3DM, I3DM and PNTS tile content.
     *
     * This assumes that the length of the given buffer has already
     * been validated to be sufficient for the respective header
     * data.
     *
     * It validates the feature- and batch table JSON- and binary
     * offsets, extracts the respective JSON- and binary data,
     * parses the JSON data, and returns the result.
     *
     * If any offset does not meet the alignment- or length
     * requirements from the specification, then the appropriate
     * validation issue will be added to the given context, and
     * `undefined` will be returned.
     *
     * Otherwise, a `BinaryTableData` object with the valid
     * JSON- and binary data will be returned.
     *
     * @param path - The path for `ValidationIssue` instances
     * @param input - The input buffer
     * @param headerByteLength - The length of the tile format header
     * @param hasEmbeddedGlb - Whether the input is expected to have
     * embedded GLB data. This is `true` for B3DM, `false` for PNTS,
     * and `gltfFormat===1` for I3DM.
     * @param context - The `ValidationContext`
     * @returns The `BinaryTableData`
     */
    static extractBinaryTableData(path: string, input: Buffer, headerByteLength: number, hasEmbeddedGlb: boolean, context: ValidationContext): BinaryTableData | undefined;
}
//# sourceMappingURL=TileFormatValidator.d.ts.map