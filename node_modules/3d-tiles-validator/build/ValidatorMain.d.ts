import { ValidationState } from "./validation/ValidationState";
import { ValidationResult } from "./validation/ValidationResult";
import { ValidationOptions } from "./validation/ValidationOptions";
import { TileImplicitTiling } from "3d-tiles-tools";
/**
 * A class summarizing the command-line functions of the validator.
 *
 * The functions in this class are supposed to be called from `main.ts`,
 * based on the parsed command line arguments.
 *
 * @internal
 */
export declare class ValidatorMain {
    static readonly specsDataRootDir = "specs/data/";
    /**
     * Performs a run of the validator, using the given configuration settings.
     *
     * The configuration may contain properties that match the (long form
     * of the) command line arguments, as well as an `options: ValidationOptions`
     * object (using default options if none are given).
     *
     * @param args - The command line arguments (the `yargs` instance)
     * @param config - The configuration for the validator run
     */
    static performValidation(args: any, config: any): Promise<void>;
    /**
     * If a `reportFile` was specified in the given configuration,
     * then this is returned.
     *
     * Otherwise, if `writeReports` was specified, a report file
     * name is derived from the given file name and returned
     * (with the details about this name being unspecified for now).
     *
     * Otherwise, `undefined` is returned.
     *
     * @param config - The validation configuration
     * @param inputFileName - The input file name
     * @returns The report file name, or `undefined`
     */
    private static obtainReportFileName;
    static validateTilesetFile(fileName: string, reportFileName: string | undefined, options: ValidationOptions | undefined): Promise<ValidationResult>;
    static validateTilesetsDirectory(directoryName: string, globPattern: string, writeReports: boolean, options: ValidationOptions | undefined): Promise<void>;
    static validateSchemaFile(fileName: string, reportFileName: string | undefined): Promise<ValidationResult>;
    static validateSubtreeFile(fileName: string, validationState: ValidationState, implicitTiling: TileImplicitTiling | undefined, reportFileName: string | undefined): Promise<ValidationResult>;
    static validateAllTilesetSpecFiles(writeReports: boolean): Promise<void>;
    static validateAllMetadataSchemaSpecFiles(writeReports: boolean): Promise<void>;
    static validateAllSubtreeSpecFiles(writeReports: boolean): Promise<void>;
    static validateSubtreeSpecFile(fileName: string, reportFileName: string | undefined): Promise<void>;
    /**
     * Derives a file name for a report from the given input file name.
     * The resulting file name will be a file in the same directory as
     * the given one. Further details are intentionally not specified here.
     *
     * @param inputFileName - The input file name
     * @returns The report file name
     */
    static deriveReportFileName(inputFileName: string): string | undefined;
}
//# sourceMappingURL=ValidatorMain.d.ts.map